{"title":"AIO-NIO-BIO","uid":"1637b2da4673dd7cb2a0b4e4e3c13443","slug":"BIO、NIO、AIO","date":"2023-08-25T10:49:36.000Z","updated":"2024-01-01T01:05:48.119Z","comments":true,"path":"api/articles/BIO、NIO、AIO.json","keywords":null,"cover":[],"content":"<h1 id=\"第一章-BIO、NIO、AIO课程介绍\"><a href=\"#第一章-BIO、NIO、AIO课程介绍\" class=\"headerlink\" title=\"第一章 BIO、NIO、AIO课程介绍\"></a>第一章 BIO、NIO、AIO课程介绍</h1><h2 id=\"1-1-课程说明\"><a href=\"#1-1-课程说明\" class=\"headerlink\" title=\"1.1 课程说明\"></a>1.1 课程说明</h2><p>在Java的软件设计开发中，通信架构是不可避免的，我们在进行不同系统或者不同进程之间的数据交互，或者在高并发下的通信场景下都需要用到网络通信相关的技术，对于一些经验丰富的程序员来说，Java早期的网络通信架构存在一些缺陷，<strong>其中最令人恼火的是基于性能低下的同步阻塞式的I&#x2F;O通信（BIO）</strong>，随着互联网开发下通信性能的高要求，Java在2002年开始支持了非阻塞式的I&#x2F;O通信技术(NIO)。大多数读者在学习网络通信相关技术的时候，都只是接触到零碎的通信技术点，没有完整的技术体系架构，以至于对于Java的通信场景总是没有清晰的解决方案。本次课程将通过大量清晰直接的案例从最基础的BIO式通信开始介绍到NIO , AIO，读者可以清晰的了解到阻塞、同步、异步的现象、概念和特征以及优缺点。本课程结合了大量的案例让读者可以快速了解每种通信架构的使用。</p>\n<h2 id=\"1-2-本课程学习要求\"><a href=\"#1-2-本课程学习要求\" class=\"headerlink\" title=\"1.2 本课程学习要求\"></a>1.2 本课程学习要求</h2><ul>\n<li><strong>本课程不太适合完全0基础学员。</strong></li>\n<li><strong>至少需要掌握: Java SE基础编程，如Java多线程，Java IO流编程，Java网络基础知识（如：IP , 端口，协议），常用的Java设计模式要有一定的了解。</strong></li>\n<li><strong>能熟练掌握Java OOP编程，有一定的编程思维。</strong></li>\n</ul>\n<h2 id=\"1-3-通信技术整体解决的问题\"><a href=\"#1-3-通信技术整体解决的问题\" class=\"headerlink\" title=\"1.3 通信技术整体解决的问题\"></a>1.3 通信技术整体解决的问题</h2><ul>\n<li><strong>局域网内的通信要求。</strong></li>\n<li><strong>多系统间的底层消息传递机制。</strong></li>\n<li><strong>高并发下，大数据量的通信场景需要。</strong></li>\n<li><strong>游戏行业。无论是手游服务端，还是大型的网络游戏，Java语言都得到越来越广泛的应用。</strong></li>\n</ul>\n<h1 id=\"第二章-Java的I-O演进之路\"><a href=\"#第二章-Java的I-O演进之路\" class=\"headerlink\" title=\"第二章 Java的I&#x2F;O演进之路\"></a>第二章 Java的I&#x2F;O演进之路</h1><h2 id=\"2-1-I-O-模型基本说明\"><a href=\"#2-1-I-O-模型基本说明\" class=\"headerlink\" title=\"2.1 I&#x2F;O 模型基本说明\"></a>2.1 I&#x2F;O 模型基本说明</h2><p><strong>I&#x2F;O 模型：就是用什么样的通道或者说是通信模式和架构进行数据的传输和接收，很大程度上决定了程序通信的性能，Java 共支持 3 种网络编程的&#x2F;IO 模型：BIO、NIO、AIO</strong><br><strong>实际通信需求下，要根据不同的业务场景和性能需求决定选择不同的I&#x2F;O模型</strong></p>\n<h2 id=\"2-2-I-O模型\"><a href=\"#2-2-I-O模型\" class=\"headerlink\" title=\"2.2 I&#x2F;O模型\"></a>2.2 I&#x2F;O模型</h2><h3 id=\"Java-BIO\"><a href=\"#Java-BIO\" class=\"headerlink\" title=\"Java BIO\"></a>Java BIO</h3><p><strong>同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器</strong><br><strong>端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销 【简单示意图</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/3283883721.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"Java-NIO\"><a href=\"#Java-NIO\" class=\"headerlink\" title=\"Java NIO\"></a>Java NIO</h3><p><strong>Java NIO ： 同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注</strong><br><strong>册到多路复用器上，多路复用器轮询到连接有 I&#x2F;O 请求就进行处理 【简单示意图】</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/3747401524.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"Java-AIO\"><a href=\"#Java-AIO\" class=\"headerlink\" title=\"Java AIO\"></a>Java AIO</h3><p><strong>Java AIO(NIO.2) ： 异步 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I&#x2F;O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，一般适用于连接数较多且连接时间较长的应用</strong></p>\n<h2 id=\"2-3-BIO、NIO、AIO适用场景分析\"><a href=\"#2-3-BIO、NIO、AIO适用场景分析\" class=\"headerlink\" title=\"2.3 BIO、NIO、AIO适用场景分析\"></a>2.3 BIO、NIO、AIO适用场景分析</h2><p><strong>1、BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解。</strong><br><strong>2、NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，JDK1.4 开始支持。</strong><br><strong>3、AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</strong></p>\n<h1 id=\"第三章-JAVA-BIO深入剖析\"><a href=\"#第三章-JAVA-BIO深入剖析\" class=\"headerlink\" title=\"第三章 JAVA BIO深入剖析\"></a>第三章 JAVA BIO深入剖析</h1><h2 id=\"3-1-Java-BIO-基本介绍\"><a href=\"#3-1-Java-BIO-基本介绍\" class=\"headerlink\" title=\"3.1 Java BIO 基本介绍\"></a>3.1 Java BIO 基本介绍</h2><ul>\n<li><strong>Java BIO 就是传统的 java io  编程，其相关的类和接口在 java.io</strong></li>\n<li><strong>BIO(blocking I&#x2F;O) ： 同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善(实现多个客户连接服务器).</strong></li>\n</ul>\n<h2 id=\"3-2-Java-BIO-工作机制\"><a href=\"#3-2-Java-BIO-工作机制\" class=\"headerlink\" title=\"3.2 Java BIO 工作机制\"></a>3.2 Java BIO 工作机制</h2><p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/904424891.png\" alt=\"请输入图片描述\"></p>\n<p><strong>对 BIO  编程流程的梳理</strong></p>\n<ol>\n<li>**服务器端启动一个 ** <strong>ServerSocket</strong>，注册端口，调用accpet方法监听客户端的Socket连接。</li>\n<li>**客户端启动 ** <strong>Socket</strong> 对服务器进行通信，默认情况下服务器端需要对每个客户 建立一个线程与之通讯</li>\n</ol>\n<h2 id=\"3-3-传统的BIO编程实例回顾\"><a href=\"#3-3-传统的BIO编程实例回顾\" class=\"headerlink\" title=\"3.3  传统的BIO编程实例回顾\"></a>3.3  传统的BIO编程实例回顾</h2><p><strong>网络编程的基本模型是Client&#x2F;Server模型，也就是两个进程之间进行相互通信，其中服务端提供位置信（绑定IP地址和端口），客户端通过连接操作向服务端监听的端口地址发起连接请求，基于TCP协议下进行三次握手连接，连接成功后，双方通过网络套接字（Socket）进行通信。</strong></p>\n<ul>\n<li><strong>传统的同步阻塞模型开发中，服务端ServerSocket负责绑定IP地址，启动监听端口；客户端Socket负责发起连接操作。连接成功后，双方通过输入和输出流进行同步阻塞式通信。</strong></li>\n<li><strong>基于BIO模式下的通信，客户端 - 服务端是完全同步，完全耦合的。</strong></li>\n</ul>\n<h3 id=\"客户端案例如下\"><a href=\"#客户端案例如下\" class=\"headerlink\" title=\"客户端案例如下\"></a>客户端案例如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima._02bio01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标: Socket网络编程。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Java提供了一个包：java.net下的类都是用于网络通信。</span></span><br><span class=\"line\"><span class=\"comment\">    Java提供了基于套接字（端口）Socket的网络通信模式，我们基于这种模式就可以直接实现TCP通信。</span></span><br><span class=\"line\"><span class=\"comment\">    只要用Socket通信，那么就是基于TCP可靠传输通信。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    功能1：客户端发送一个消息，服务端接口一个消息，通信结束！！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    创建客户端对象：</span></span><br><span class=\"line\"><span class=\"comment\">        （1）创建一个Socket的通信管道，请求与服务端的端口连接。</span></span><br><span class=\"line\"><span class=\"comment\">        （2）从Socket管道中得到一个字节输出流。</span></span><br><span class=\"line\"><span class=\"comment\">        （3）把字节流改装成自己需要的流进行数据的发送</span></span><br><span class=\"line\"><span class=\"comment\">    创建服务端对象：</span></span><br><span class=\"line\"><span class=\"comment\">        （1）注册端口</span></span><br><span class=\"line\"><span class=\"comment\">        （2）开始等待接收客户端的连接,得到一个端到端的Socket管道</span></span><br><span class=\"line\"><span class=\"comment\">        （3）从Socket管道中得到一个字节输入流。</span></span><br><span class=\"line\"><span class=\"comment\">        （4）把字节输入流包装成自己需要的流进行数据的读取。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Socket的使用：</span></span><br><span class=\"line\"><span class=\"comment\">        构造器：public Socket(String host, int port)</span></span><br><span class=\"line\"><span class=\"comment\">        方法：  public OutputStream getOutputStream()：获取字节输出流</span></span><br><span class=\"line\"><span class=\"comment\">               public InputStream getInputStream() :获取字节输入流</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ServerSocket的使用：</span></span><br><span class=\"line\"><span class=\"comment\">        构造器：public ServerSocket(int port)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    小结：</span></span><br><span class=\"line\"><span class=\"comment\">        通信是很严格的，对方怎么发你就怎么收，对方发多少你就只能收多少！！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==客户端的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （1）创建一个Socket的通信管道，请求与服务端的端口连接。</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （2）从Socket通信管道中得到一个字节输出流。</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// （3）把字节流改装成自己需要的流进行数据的发送</span></span><br><span class=\"line\">        <span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(os);</span><br><span class=\"line\">        <span class=\"comment\">// （4）开始发送消息</span></span><br><span class=\"line\">        ps.println(<span class=\"string\">&quot;我是客户端，我想约你吃小龙虾！！！&quot;</span>);</span><br><span class=\"line\">        ps.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端案例如下\"><a href=\"#服务端案例如下\" class=\"headerlink\" title=\"服务端案例如下\"></a>服务端案例如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima._02bio01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==服务器的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （1）注册端口</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">//（2）开始在这里暂停等待接收客户端的连接,得到一个端到端的Socket管道</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">        <span class=\"comment\">//（3）从Socket管道中得到一个字节输入流。</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"comment\">//（4）把字节输入流包装成自己需要的流进行数据的读取。</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is));</span><br><span class=\"line\">        <span class=\"comment\">//（5）读取数据</span></span><br><span class=\"line\">        String line ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((line = br.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;服务端收到：&quot;</span>+line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>在以上通信中，服务端会一致等待客户端的消息，如果客户端没有进行消息的发送，服务端将一直进入阻塞状态。</strong></li>\n<li><strong>同时服务端是按照行获取消息的，这意味着客户端也必须按照行进行消息的发送，否则服务端将进入等待消息的阻塞状态！</strong></li>\n</ul>\n<h2 id=\"3-4-BIO模式下多发和多收消息\"><a href=\"#3-4-BIO模式下多发和多收消息\" class=\"headerlink\" title=\"3.4 BIO模式下多发和多收消息\"></a>3.4 BIO模式下多发和多收消息</h2><p>在1.3的案例中，<strong>只能实现客户端发送消息，服务端接收消息</strong>，并不能实现反复的收消息和反复的发消息，我们只需要在客户端案例中，加上反复按照行发送消息的逻辑即可！案例代码如下：</p>\n<h3 id=\"客户端代码如下\"><a href=\"#客户端代码如下\" class=\"headerlink\" title=\"客户端代码如下\"></a>客户端代码如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima._03bio02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标: Socket网络编程。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    功能1：客户端可以反复发消息，服务端可以反复收消息</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    小结：</span></span><br><span class=\"line\"><span class=\"comment\">        通信是很严格的，对方怎么发你就怎么收，对方发多少你就只能收多少！！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==客户端的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （1）创建一个Socket的通信管道，请求与服务端的端口连接。</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （2）从Socket通信管道中得到一个字节输出流。</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// （3）把字节流改装成自己需要的流进行数据的发送</span></span><br><span class=\"line\">        <span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(os);</span><br><span class=\"line\">        <span class=\"comment\">// （4）开始发送消息</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;请说:&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> sc.nextLine();</span><br><span class=\"line\">            ps.println(msg);</span><br><span class=\"line\">            ps.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端代码如下\"><a href=\"#服务端代码如下\" class=\"headerlink\" title=\"服务端代码如下\"></a>服务端代码如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima._03bio02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;886&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;886&quot;</span>.equals(s));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==服务器的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//（1）注册端口</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">//（2）开始在这里暂停等待接收客户端的连接,得到一个端到端的Socket管道</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">        <span class=\"comment\">//（3）从Socket管道中得到一个字节输入流。</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"comment\">//（4）把字节输入流包装成  自己需要的流进行数据的读取。</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is));</span><br><span class=\"line\">        <span class=\"comment\">//（5）读取数据</span></span><br><span class=\"line\">        String line ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((line = br.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;服务端收到：&quot;</span>+line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>本案例中确实可以实现客户端多发多收</strong></li>\n<li><strong>但是服务端只能处理一个客户端的请求，因为服务端是单线程的。一次只能与一个客户端进行消息通信。</strong></li>\n</ul>\n<h2 id=\"3-5-BIO模式下接收多个客户端\"><a href=\"#3-5-BIO模式下接收多个客户端\" class=\"headerlink\" title=\"3.5 BIO模式下接收多个客户端\"></a>3.5 BIO模式下接收多个客户端</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li><strong>在上述的案例中，一个服务端只能接收一个客户端的通信请求，</strong>那么如果服务端需要处理很多个客户端的消息通信请求应该如何处理呢**，此时我们就需要在服务端引入线程了，也就是说客户端每发起一个请求，服务端就创建一个新的线程来处理这个客户端的请求，这样就实现了一个客户端一个线程的模型，图解模式如下：</li>\n</ul>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/1978218907.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"客户端案例代码如下\"><a href=\"#客户端案例代码如下\" class=\"headerlink\" title=\"客户端案例代码如下\"></a>客户端案例代码如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标: Socket网络编程。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    功能1：客户端可以反复发，一个服务端可以接收无数个客户端的消息！！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    小结：</span></span><br><span class=\"line\"><span class=\"comment\">         服务器如果想要接收多个客户端，那么必须引入线程，一个客户端一个线程处理！！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==客户端的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （1）创建一个Socket的通信管道，请求与服务端的端口连接。</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">7777</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （2）从Socket通信管道中得到一个字节输出流。</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// （3）把字节流改装成自己需要的流进行数据的发送</span></span><br><span class=\"line\">        <span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(os);</span><br><span class=\"line\">        <span class=\"comment\">// （4）开始发送消息</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;请说:&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> sc.nextLine();</span><br><span class=\"line\">            ps.println(msg);</span><br><span class=\"line\">            ps.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端案例代码如下\"><a href=\"#服务端案例代码如下\" class=\"headerlink\" title=\"服务端案例代码如下\"></a>服务端案例代码如下</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    服务端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==服务器的启动==&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// （1）注册端口</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">7777</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//（2）开始在这里暂停等待接收客户端的连接,得到一个端到端的Socket管道</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ServerReadThread</span>(socket).start();</span><br><span class=\"line\">            System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;上线了！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServerReadThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ServerReadThread</span><span class=\"params\">(Socket socket)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//（3）从Socket管道中得到一个字节输入流。</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">//（4）把字节输入流包装成自己需要的流进行数据的读取。</span></span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is));</span><br><span class=\"line\">            <span class=\"comment\">//（5）读取数据</span></span><br><span class=\"line\">            String line ;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((line = br.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;服务端收到：&quot;</span>+socket.getRemoteSocketAddress()+<span class=\"string\">&quot;:&quot;</span>+line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;下线了！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>1.每个Socket接收到，都会创建一个线程，线程的竞争、切换上下文影响性能；</strong></li>\n<li><strong>2.每个线程都会占用栈空间和CPU资源；</strong></li>\n<li>**3.并不是每个socket都进行IO操作，无意义的线程处理；  **</li>\n<li><strong>4.客户端的并发访问增加时。服务端将呈现1:1的线程开销，访问量越大，系统将发生线程栈溢出，线程创建失败，最终导致进程宕机或者僵死，从而不能对外提供服务。</strong></li>\n</ul>\n<h2 id=\"3-6-伪异步I-O编程\"><a href=\"#3-6-伪异步I-O编程\" class=\"headerlink\" title=\"3.6 伪异步I&#x2F;O编程\"></a>3.6 伪异步I&#x2F;O编程</h2><h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li><p><strong>在上述案例中：客户端的并发访问增加时。服务端将呈现1:1的线程开销，访问量越大，系统将发生线程栈溢出，线程创建失败，最终导致进程宕机或者僵死，从而不能对外提供服务。</strong></p>\n</li>\n<li><p><strong>接下来我们采用一个伪异步I&#x2F;O的通信框架，采用线程池和任务队列实现，当客户端接入时，将客户端的Socket封装成一个Task(该任务实现java.lang.Runnable线程任务接口)交给后端的线程池中进行处理。JDK的线程池维护一个消息队列和N个活跃的线程，对消息队列中Socket任务进行处理，由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</strong></p>\n</li>\n<li><p><strong>图示如下:</strong></p>\n</li>\n</ul>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/1306676616.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"客户端源码分析\"><a href=\"#客户端源码分析\" class=\"headerlink\" title=\"客户端源码分析\"></a>客户端源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 1.简历一个与服务端的Socket对象：套接字</span></span><br><span class=\"line\">         <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 2.从socket管道中获取一个输出流，写数据给服务端 </span></span><br><span class=\"line\">         <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> socket.getOutputStream() ;</span><br><span class=\"line\">         <span class=\"comment\">// 3.把输出流包装成一个打印流 </span></span><br><span class=\"line\">         <span class=\"type\">PrintWriter</span> <span class=\"variable\">pw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(os);</span><br><span class=\"line\">         <span class=\"comment\">// 4.反复接收用户的输入 </span></span><br><span class=\"line\">         <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\">         <span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            pw.println(line);</span><br><span class=\"line\">            pw.flush();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程池处理类\"><a href=\"#线程池处理类\" class=\"headerlink\" title=\"线程池处理类\"></a>线程池处理类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线程池处理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerSocketThreadPool</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 线程池 </span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> ExecutorService executor;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">HandlerSocketThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> maxPoolSize, <span class=\"type\">int</span> queueSize)</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"built_in\">this</span>.executor = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">            <span class=\"number\">3</span>, <span class=\"comment\">// 8</span></span><br><span class=\"line\">            maxPoolSize,  </span><br><span class=\"line\">            <span class=\"number\">120L</span>, </span><br><span class=\"line\">            TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;Runnable&gt;(queueSize) );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable task)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.executor.execute(task);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端源码分析\"><a href=\"#服务端源码分析\" class=\"headerlink\" title=\"服务端源码分析\"></a>服务端源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;----------服务端启动成功------------&quot;</span>);</span><br><span class=\"line\">         <span class=\"type\">ServerSocket</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">9999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 一个服务端只需要对应一个线程池</span></span><br><span class=\"line\">         <span class=\"type\">HandlerSocketThreadPool</span> <span class=\"variable\">handlerSocketThreadPool</span> <span class=\"operator\">=</span></span><br><span class=\"line\">               <span class=\"keyword\">new</span> <span class=\"title class_\">HandlerSocketThreadPool</span>(<span class=\"number\">3</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 客户端可能有很多个</span></span><br><span class=\"line\">         <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> ss.accept() ; <span class=\"comment\">// 阻塞式的！</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;有人上线了！！&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 每次收到一个客户端的socket请求，都需要为这个客户端分配一个</span></span><br><span class=\"line\">            <span class=\"comment\">// 独立的线程 专门负责对这个客户端的通信！！</span></span><br><span class=\"line\">            handlerSocketThreadPool.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">ReaderClientRunnable</span>(socket));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ReaderClientRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Socket socket ;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">ReaderClientRunnable</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 读取一行数据</span></span><br><span class=\"line\">         <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> socket.getInputStream() ;</span><br><span class=\"line\">         <span class=\"comment\">// 转成一个缓冲字符流</span></span><br><span class=\"line\">         <span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is);</span><br><span class=\"line\">         <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(fr);</span><br><span class=\"line\">         <span class=\"comment\">// 一行一行的读取数据</span></span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\">         <span class=\"keyword\">while</span>((line = br.readLine())!=<span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 阻塞式的！！</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;服务端收到了数据：&quot;</span>+line);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;有人下线了&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>伪异步io采用了线程池实现，因此避免了为每个请求创建一个独立线程造成线程资源耗尽的问题，但由于底层依然是采用的同步阻塞模型，因此无法从根本上解决问题。</strong></li>\n<li><strong>如果单个消息处理的缓慢，或者服务器线程池中的全部线程都被阻塞，那么后续socket的i&#x2F;o消息都将在队列中排队。新的Socket请求将被拒绝，客户端会发生大量连接超时。</strong></li>\n</ul>\n<h2 id=\"3-7-基于BIO形式下的文件上传\"><a href=\"#3-7-基于BIO形式下的文件上传\" class=\"headerlink\" title=\"3.7 基于BIO形式下的文件上传\"></a>3.7 基于BIO形式下的文件上传</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p><strong>支持任意类型文件形式的上传。</strong></p>\n<h3 id=\"客户端开发\"><a href=\"#客户端开发\" class=\"headerlink\" title=\"客户端开发\"></a>客户端开发</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标：实现客户端上传任意类型的文件数据给服务端保存起来。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\dlei\\\\Desktop\\\\BIO,NIO,AIO\\\\文件\\\\java.png&quot;</span>);</span><br><span class=\"line\">        )&#123;</span><br><span class=\"line\">            <span class=\"comment\">//  1、请求与服务端的Socket链接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span> , <span class=\"number\">8888</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  2、把字节输出流包装成一个数据输出流</span></span><br><span class=\"line\">            <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">            <span class=\"comment\">//  3、先发送上传文件的后缀给服务端</span></span><br><span class=\"line\">            dos.writeUTF(<span class=\"string\">&quot;.png&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  4、把文件数据发送给服务端进行接收</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((len = is.read(buffer)) &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">                dos.write(buffer , <span class=\"number\">0</span> , len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dos.flush();</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端开发\"><a href=\"#服务端开发\" class=\"headerlink\" title=\"服务端开发\"></a>服务端开发</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标：服务端开发，可以实现接收客户端的任意类型文件，并保存到服务端磁盘。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">ServerSocket</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> ss.accept();</span><br><span class=\"line\">                <span class=\"comment\">// 交给一个独立的线程来处理与这个客户端的文件通信需求。</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ServerReaderThread</span>(socket).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReaderThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ServerReaderThread</span><span class=\"params\">(Socket socket)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、得到一个数据输入流读取客户端发送过来的数据</span></span><br><span class=\"line\">            <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">            <span class=\"comment\">// 2、读取客户端发送过来的文件类型</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;服务端已经成功接收到了文件类型：&quot;</span> + suffix);</span><br><span class=\"line\">            <span class=\"comment\">// 3、定义一个字节输出管道负责把客户端发来的文件数据写出去</span></span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\dlei\\\\Desktop\\\\BIO,NIO,AIO\\\\文件\\\\server\\\\&quot;</span>+</span><br><span class=\"line\">                    UUID.randomUUID().toString()+suffix);</span><br><span class=\"line\">            <span class=\"comment\">// 4、从数据输入流中读取文件数据，写出到字节输出流中去</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((len = dis.read(buffer)) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                os.write(buffer,<span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;服务端接收文件保存成功！&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>客户端怎么发，服务端就怎么接收</strong></p>\n<h2 id=\"3-9-Java-BIO模式下的端口转发思想\"><a href=\"#3-9-Java-BIO模式下的端口转发思想\" class=\"headerlink\" title=\"3.9 Java BIO模式下的端口转发思想\"></a>3.9 Java BIO模式下的端口转发思想</h2><p><strong>需求：需要实现一个客户端的消息可以发送给所有的客户端去接收。（群聊实现）</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/820271505.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"客户端开发-1\"><a href=\"#客户端开发-1\" class=\"headerlink\" title=\"客户端开发\"></a>客户端开发</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    目标：实现客户端上传任意类型的文件数据给服务端保存起来。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\dlei\\\\Desktop\\\\BIO,NIO,AIO\\\\文件\\\\java.png&quot;</span>);</span><br><span class=\"line\">        )&#123;</span><br><span class=\"line\">            <span class=\"comment\">//  1、请求与服务端的Socket链接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span> , <span class=\"number\">8888</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  2、把字节输出流包装成一个数据输出流</span></span><br><span class=\"line\">            <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">            <span class=\"comment\">//  3、先发送上传文件的后缀给服务端</span></span><br><span class=\"line\">            dos.writeUTF(<span class=\"string\">&quot;.png&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  4、把文件数据发送给服务端进行接收</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((len = is.read(buffer)) &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">                dos.write(buffer , <span class=\"number\">0</span> , len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dos.flush();</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h3><h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><h2 id=\"3-10-基于BIO模式下即时通信\"><a href=\"#3-10-基于BIO模式下即时通信\" class=\"headerlink\" title=\"3.10 基于BIO模式下即时通信\"></a>3.10 基于BIO模式下即时通信</h2><p><strong>基于BIO模式下的即时通信，我们需要解决客户端到客户端的通信，也就是需要实现客户端与客户端的端口消息转发逻辑。</strong></p>\n<h3 id=\"项目功能演示\"><a href=\"#项目功能演示\" class=\"headerlink\" title=\"项目功能演示\"></a>项目功能演示</h3><h4 id=\"项目案例说明\"><a href=\"#项目案例说明\" class=\"headerlink\" title=\"项目案例说明\"></a>项目案例说明</h4><p><strong>本项目案例为即时通信的软件项目，适合基础加强的大案例，具备综合性。学习本项目案例至少需要具备如下Java SE技术点:</strong></p>\n<ul>\n<li><ol>\n<li><strong>Java 面向对象设计，语法设计。</strong></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>多线程技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><strong>IO流技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li><strong>网络通信相关技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><strong>集合框架。</strong></li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li><strong>项目开发思维。</strong></li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li><strong>Java 常用 api 使用。</strong></li>\n</ol>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h4 id=\"功能清单简单说明：\"><a href=\"#功能清单简单说明：\" class=\"headerlink\" title=\"功能清单简单说明：\"></a>功能清单简单说明：</h4><p><strong>1.客户端登陆功能</strong></p>\n<ul>\n<li><strong>可以启动客户端进行登录，客户端登陆只需要输入用户名和服务端ip地址即可。</strong></li>\n</ul>\n<p><strong>2.在线人数实时更新。</strong></p>\n<ul>\n<li><strong>客户端用户户登陆以后，需要同步更新所有客户端的联系人信息栏。</strong></li>\n</ul>\n<p><strong>3.离线人数更新</strong></p>\n<ul>\n<li><strong>检测到有客户端下线后，需要同步更新所有客户端的联系人信息栏。</strong></li>\n</ul>\n<p><strong>4.群聊</strong></p>\n<ul>\n<li><strong>任意一个客户端的消息，可以推送给当前所有客户端接收。</strong></li>\n</ul>\n<p><strong>5.私聊</strong></p>\n<ul>\n<li><strong>可以选择某个员工，点击私聊按钮，然后发出的消息可以被该客户端单独接收。</strong></li>\n</ul>\n<p><strong>6.@消息</strong></p>\n<ul>\n<li><strong>可以选择某个员工，然后发出的消息可以@该用户，但是其他所有人都能</strong></li>\n</ul>\n<p><strong>7.消息用户和消息时间点</strong></p>\n<ul>\n<li><strong>服务端可以实时记录该用户的消息时间点，然后进行消息的多路转发或者选择。</strong></li>\n</ul>\n<h4 id=\"项目启动与演示\"><a href=\"#项目启动与演示\" class=\"headerlink\" title=\"项目启动与演示\"></a>项目启动与演示</h4><p><strong>项目代码结构演示。</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/4131531956.png\" alt=\"请输入图片描述\"></p>\n<p><strong>项目启动步骤：</strong></p>\n<ul>\n<li><p><strong>1.首先需要启动服务端，点击ServerChat类直接右键启动，显示服务端启动成功！</strong></p>\n</li>\n<li><p><strong>2.其次，点击客户端类ClientChat类，在弹出的方框中输入服务端的ip和当前客户端的昵称</strong><br><img src=\"http://www.52uni.cn/usr/uploads/2023/07/496530743.png\" alt=\"请输入图片描述\"></p>\n</li>\n<li><p><strong>3.登陆进入后的聊天界面如下，即可进行相关操作。</strong></p>\n<ul>\n<li><strong>如果直接点击发送，默认发送群聊消息</strong></li>\n</ul>\n</li>\n<li><p><strong>如果选中右侧在线列表某个用户，默认发送@消息</strong></p>\n<ul>\n<li><strong>如果选中右侧在线列表某个用户，然后选择右下侧私聊按钮默，认发送私聊消息。</strong></li>\n</ul>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/350867995.png\" alt=\"请输入图片描述\"></p>\n</li>\n</ul>\n<h4 id=\"技术选型分析\"><a href=\"#技术选型分析\" class=\"headerlink\" title=\"技术选型分析\"></a>技术选型分析</h4><p><strong>本项目案例涉及到Java基础加强的案例，具体涉及到的技术点如下：</strong></p>\n<ul>\n<li><ol>\n<li><strong>Java 面向对象设计，语法设计。</strong></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>多线程技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><strong>IO流技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li><strong>网络通信相关技术。</strong></li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><strong>集合框架。</strong></li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li><strong>项目开发思维。</strong></li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li><strong>Java 常用 api 使用。</strong></li>\n</ol>\n<p><strong>……</strong></p>\n</li>\n</ul>\n<h3 id=\"服务端设计\"><a href=\"#服务端设计\" class=\"headerlink\" title=\"服务端设计\"></a>服务端设计</h3><h4 id=\"服务端接收多个客户端逻辑\"><a href=\"#服务端接收多个客户端逻辑\" class=\"headerlink\" title=\"服务端接收多个客户端逻辑\"></a>服务端接收多个客户端逻辑</h4><h5 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>服务端需要接收多个客户端的接入。</strong></p>\n<h5 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>1.服务端需要接收多个客户端，目前我们采取的策略是一个客户端对应一个服务端线程。</strong></li>\n<li><strong>2.服务端除了要注册端口以外，还需要为每个客户端分配一个独立线程处理与之通信。</strong></li>\n</ul>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><ul>\n<li><strong>服务端主体代码，主要进行端口注册，和接收客户端，分配线程处理该客户端请求</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerChat</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 定义一个集合存放所有在线的socket  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;Socket, String&gt; onLineSockets = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 1.注册端口   */</span></span><br><span class=\"line\">         <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(Constants.PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/** 2.循环一直等待所有可能的客户端连接 */</span></span><br><span class=\"line\">         <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">/**3. 把客户端的socket管道单独配置一个线程来处理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ServerReader</span>(socket).start();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>服务端分配的独立线程类负责处理该客户端Socket的管道请求。</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServerReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">ServerReader</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>常量包负责做端口配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Constants</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 常量 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">7778</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>本节实现了服务端可以接收多个客户端请求。</strong></li>\n</ul>\n<h4 id=\"服务端接收登陆消息以及监测离线\"><a href=\"#服务端接收登陆消息以及监测离线\" class=\"headerlink\" title=\"服务端接收登陆消息以及监测离线\"></a>服务端接收登陆消息以及监测离线</h4><h5 id=\"目标-2\"><a href=\"#目标-2\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>在上节我们实现了服务端可以接收多个客户端，然后服务端可以接收多个客户端连接，接下来我们要接收客户端的登陆消息。</strong></p>\n<h5 id=\"实现步骤-1\"><a href=\"#实现步骤-1\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>需要在服务端处理客户端的线程的登陆消息。</strong></li>\n<li><strong>需要注意的是，服务端需要接收客户端的消息可能有很多种。</strong><ul>\n<li><strong>分别是登陆消息，群聊消息，私聊消息 和@消息。</strong></li>\n<li><strong>这里需要约定如果客户端发送消息之前需要先发送消息的类型，类型我们使用信号值标志（1，2，3）。</strong><ul>\n<li><strong>1代表接收的是登陆消息</strong></li>\n<li><strong>2代表群发| @消息</strong></li>\n<li><strong>3代表了私聊消息</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>服务端的线程中有异常校验机制，一旦发现客户端下线会在异常机制中处理，然后移除当前客户端用户，把最新的用户列表发回给全部客户端进行在线人数更新。</strong></li>\n</ul>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ServerReader</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">dis = <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\"><span class=\"comment\">/** 1.循环一直等待客户端的消息 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 2.读取当前的消息类型 ：登录,群发,私聊 , @消息 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 先将当前登录的客户端socket存到在线人数的socket集合中   */</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> dis.readUTF() ;</span><br><span class=\"line\">System.out.println(name+<span class=\"string\">&quot;----&gt;&quot;</span>+socket.getRemoteSocketAddress());</span><br><span class=\"line\">ServerChat.onLineSockets.put(socket, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">writeMsg(flag,dis);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--有人下线了--&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 从在线人数中将当前socket移出去  </span></span><br><span class=\"line\">ServerChat.onLineSockets.remove(socket);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 从新更新在线人数并发给所有客户端 </span></span><br><span class=\"line\">writeMsg(<span class=\"number\">1</span>,dis);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeMsg</span><span class=\"params\">(<span class=\"type\">int</span> flag, DataInputStream dis)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// DataOutputStream dos = new DataOutputStream(socket.getOutputStream()); </span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量存放最终的消息形式 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */</span></span><br><span class=\"line\"><span class=\"comment\">/** onlineNames = [波仔,zhangsan,波妞]*/</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">Collection&lt;String&gt; onlineNames = ServerChat.onLineSockets.values();</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在在线人数 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(onlineNames != <span class=\"literal\">null</span> &amp;&amp; onlineNames.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String name : onlineNames)&#123;</span><br><span class=\"line\">rs.append(name+ Constants.SPILIT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉最后的一个分隔符 </span></span><br><span class=\"line\">msg = rs.substring(<span class=\"number\">0</span>, rs.lastIndexOf(Constants.SPILIT));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 将消息发送给所有的客户端 */</span></span><br><span class=\"line\">sendMsgToAll(flag,msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span> || flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsgToAll</span><span class=\"params\">(<span class=\"type\">int</span> flag, String msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">// 拿到所有的在线socket管道 给这些管道写出消息</span></span><br><span class=\"line\">Set&lt;Socket&gt; allOnLineSockets = ServerChat.onLineSockets.keySet();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Socket sk :  allOnLineSockets)&#123;</span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(sk.getOutputStream());</span><br><span class=\"line\">dos.writeInt(flag); <span class=\"comment\">// 消息类型</span></span><br><span class=\"line\">dos.writeUTF(msg);</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>此处实现了接收客户端的登陆消息，然后提取当前在线的全部的用户名称和当前登陆的用户名称发送给全部在线用户更新自己的在线人数列表。</strong></li>\n</ul>\n<h4 id=\"服务端接收群聊消息\"><a href=\"#服务端接收群聊消息\" class=\"headerlink\" title=\"服务端接收群聊消息\"></a>服务端接收群聊消息</h4><h5 id=\"目标-3\"><a href=\"#目标-3\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>在上节实现了接收客户端的登陆消息，然后提取当前在线的全部的用户名称和当前登陆的用户名称发送给全部在线用户更新自己的在线人数列表。接下来要接收客户端发来的群聊消息推送给当前在线的所有客户端</strong></p>\n<h5 id=\"实现步骤-2\"><a href=\"#实现步骤-2\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>接下来要接收客户端发来的群聊消息。</strong></li>\n<li><strong>需要注意的是，服务端需要接收客户端的消息可能有很多种。</strong><ul>\n<li><strong>分别是登陆消息，群聊消息，私聊消息 和@消息。</strong></li>\n<li><strong>这里需要约定如果客户端发送消息之前需要先发送消息的类型，类型我们使用信号值标志（1，2，3）。</strong><ul>\n<li><strong>1代表接收的是登陆消息</strong></li>\n<li><strong>2代表群发| @消息</strong></li>\n<li><strong>3代表了私聊消息</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ServerReader</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">dis = <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\"><span class=\"comment\">/** 1.循环一直等待客户端的消息 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 2.读取当前的消息类型 ：登录,群发,私聊 , @消息 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 先将当前登录的客户端socket存到在线人数的socket集合中   */</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> dis.readUTF() ;</span><br><span class=\"line\">System.out.println(name+<span class=\"string\">&quot;----&gt;&quot;</span>+socket.getRemoteSocketAddress());</span><br><span class=\"line\">ServerChat.onLineSockets.put(socket, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">writeMsg(flag,dis);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--有人下线了--&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 从在线人数中将当前socket移出去  </span></span><br><span class=\"line\">ServerChat.onLineSockets.remove(socket);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 从新更新在线人数并发给所有客户端 </span></span><br><span class=\"line\">writeMsg(<span class=\"number\">1</span>,dis);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeMsg</span><span class=\"params\">(<span class=\"type\">int</span> flag, DataInputStream dis)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// DataOutputStream dos = new DataOutputStream(socket.getOutputStream()); </span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量存放最终的消息形式 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */</span></span><br><span class=\"line\"><span class=\"comment\">/** onlineNames = [波仔,zhangsan,波妞]*/</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">Collection&lt;String&gt; onlineNames = ServerChat.onLineSockets.values();</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在在线人数 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(onlineNames != <span class=\"literal\">null</span> &amp;&amp; onlineNames.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String name : onlineNames)&#123;</span><br><span class=\"line\">rs.append(name+ Constants.SPILIT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉最后的一个分隔符 </span></span><br><span class=\"line\">msg = rs.substring(<span class=\"number\">0</span>, rs.lastIndexOf(Constants.SPILIT));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 将消息发送给所有的客户端 */</span></span><br><span class=\"line\">sendMsgToAll(flag,msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span> || flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 读到消息  群发的 或者 @消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">newMsg</span> <span class=\"operator\">=</span> dis.readUTF() ; <span class=\"comment\">// 消息</span></span><br><span class=\"line\"><span class=\"comment\">// 得到发件人 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sendName</span> <span class=\"operator\">=</span> ServerChat.onLineSockets.get(socket);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内容</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">msgFinal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"comment\">// 时间  </span></span><br><span class=\"line\"><span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss EEE&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">msgFinal.append(sendName).append(<span class=\"string\">&quot;  &quot;</span>).append(sdf.format(System.currentTimeMillis())).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">msgFinal.append(<span class=\"string\">&quot;    &quot;</span>).append(newMsg).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">sendMsgToAll(flag,msgFinal.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsgToAll</span><span class=\"params\">(<span class=\"type\">int</span> flag, String msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">// 拿到所有的在线socket管道 给这些管道写出消息</span></span><br><span class=\"line\">Set&lt;Socket&gt; allOnLineSockets = ServerChat.onLineSockets.keySet();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Socket sk :  allOnLineSockets)&#123;</span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(sk.getOutputStream());</span><br><span class=\"line\">dos.writeInt(flag); <span class=\"comment\">// 消息类型</span></span><br><span class=\"line\">dos.writeUTF(msg);</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>此处根据消息的类型判断为群聊消息，然后把群聊消息推送给当前在线的所有客户端。</strong></li>\n</ul>\n<h4 id=\"服务端接收私聊消息\"><a href=\"#服务端接收私聊消息\" class=\"headerlink\" title=\"服务端接收私聊消息\"></a>服务端接收私聊消息</h4><h5 id=\"目标-4\"><a href=\"#目标-4\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>在上节我们接收了客户端发来的群聊消息推送给当前在线的所有客户端，接下来要解决私聊消息的推送逻辑</strong></p>\n<h5 id=\"实现步骤-3\"><a href=\"#实现步骤-3\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>解决私聊消息的推送逻辑，私聊消息需要知道推送给某个具体的客户端</strong></li>\n<li><strong>我们可以接收到客户端发来的私聊用户名称，根据用户名称定位该用户的Socket管道，然后单独推送消息给该Socket管道。</strong></li>\n<li><strong>需要注意的是，服务端需要接收客户端的消息可能有很多种。</strong><ul>\n<li><strong>分别是登陆消息，群聊消息，私聊消息 和@消息。</strong></li>\n<li><strong>这里需要约定如果客户端发送消息之前需要先发送消息的类型，类型我们使用信号值标志（1，2，3）。</strong><ul>\n<li><strong>1代表接收的是登陆消息</strong></li>\n<li><strong>2代表群发| @消息</strong></li>\n<li><strong>3代表了私聊消息</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ServerReader</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">dis = <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\"><span class=\"comment\">/** 1.循环一直等待客户端的消息 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 2.读取当前的消息类型 ：登录,群发,私聊 , @消息 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 先将当前登录的客户端socket存到在线人数的socket集合中   */</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> dis.readUTF() ;</span><br><span class=\"line\">System.out.println(name+<span class=\"string\">&quot;----&gt;&quot;</span>+socket.getRemoteSocketAddress());</span><br><span class=\"line\">ServerChat.onLineSockets.put(socket, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">writeMsg(flag,dis);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--有人下线了--&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 从在线人数中将当前socket移出去  </span></span><br><span class=\"line\">ServerChat.onLineSockets.remove(socket);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 从新更新在线人数并发给所有客户端 </span></span><br><span class=\"line\">writeMsg(<span class=\"number\">1</span>,dis);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeMsg</span><span class=\"params\">(<span class=\"type\">int</span> flag, DataInputStream dis)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// DataOutputStream dos = new DataOutputStream(socket.getOutputStream()); </span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量存放最终的消息形式 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 读取所有在线人数发给所有客户端去更新自己的在线人数列表 */</span></span><br><span class=\"line\"><span class=\"comment\">/** onlineNames = [波仔,zhangsan,波妞]*/</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">Collection&lt;String&gt; onlineNames = ServerChat.onLineSockets.values();</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在在线人数 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(onlineNames != <span class=\"literal\">null</span> &amp;&amp; onlineNames.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String name : onlineNames)&#123;</span><br><span class=\"line\">rs.append(name+ Constants.SPILIT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉最后的一个分隔符 </span></span><br><span class=\"line\">msg = rs.substring(<span class=\"number\">0</span>, rs.lastIndexOf(Constants.SPILIT));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 将消息发送给所有的客户端 */</span></span><br><span class=\"line\">sendMsgToAll(flag,msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span> || flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 读到消息  群发的 或者 @消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">newMsg</span> <span class=\"operator\">=</span> dis.readUTF() ; <span class=\"comment\">// 消息</span></span><br><span class=\"line\"><span class=\"comment\">// 得到发件人 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sendName</span> <span class=\"operator\">=</span> ServerChat.onLineSockets.get(socket);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内容</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">msgFinal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"comment\">// 时间  </span></span><br><span class=\"line\"><span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss EEE&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">msgFinal.append(sendName).append(<span class=\"string\">&quot;  &quot;</span>).append(sdf.format(System.currentTimeMillis())).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">msgFinal.append(<span class=\"string\">&quot;    &quot;</span>).append(newMsg).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">sendMsgToAll(flag,msgFinal.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">msgFinal.append(sendName).append(<span class=\"string\">&quot;  &quot;</span>).append(sdf.format(System.currentTimeMillis())).append(<span class=\"string\">&quot;对您私发\\r\\n&quot;</span>);</span><br><span class=\"line\">msgFinal.append(<span class=\"string\">&quot;    &quot;</span>).append(newMsg).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 私发 </span></span><br><span class=\"line\"><span class=\"comment\">// 得到给谁私发 </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">destName</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">sendMsgToOne(destName,msgFinal.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> destName 对谁私发 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> msg 发的消息内容 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsgToOne</span><span class=\"params\">(String destName, String msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">// 拿到所有的在线socket管道 给这些管道写出消息</span></span><br><span class=\"line\">Set&lt;Socket&gt; allOnLineSockets = ServerChat.onLineSockets.keySet();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Socket sk :  allOnLineSockets)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 得到当前需要私发的socket </span></span><br><span class=\"line\"><span class=\"comment\">// 只对这个名字对应的socket私发消息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ServerChat.onLineSockets.get(sk).trim().equals(destName))&#123;</span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(sk.getOutputStream());</span><br><span class=\"line\">dos.writeInt(<span class=\"number\">2</span>); <span class=\"comment\">// 消息类型</span></span><br><span class=\"line\">dos.writeUTF(msg);</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsgToAll</span><span class=\"params\">(<span class=\"type\">int</span> flag, String msg)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">// 拿到所有的在线socket管道 给这些管道写出消息</span></span><br><span class=\"line\">Set&lt;Socket&gt; allOnLineSockets = ServerChat.onLineSockets.keySet();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Socket sk :  allOnLineSockets)&#123;</span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(sk.getOutputStream());</span><br><span class=\"line\">dos.writeInt(flag); <span class=\"comment\">// 消息类型</span></span><br><span class=\"line\">dos.writeUTF(msg);</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>本节我们解决了私聊消息的推送逻辑，私聊消息需要知道推送给某个具体的客户端Socket管道</strong></li>\n<li><strong>我们可以接收到客户端发来的私聊用户名称，根据用户名称定位该用户的Socket管道，然后单独推送消息给该Socket管道。</strong></li>\n</ul>\n<h3 id=\"客户端设计\"><a href=\"#客户端设计\" class=\"headerlink\" title=\"客户端设计\"></a>客户端设计</h3><h4 id=\"启动客户端界面-登陆，刷新在线\"><a href=\"#启动客户端界面-登陆，刷新在线\" class=\"headerlink\" title=\"启动客户端界面 ,登陆，刷新在线\"></a>启动客户端界面 ,登陆，刷新在线</h4><h5 id=\"目标-5\"><a href=\"#目标-5\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>启动客户端界面</strong>，登陆，刷新在线人数列表</p>\n<h5 id=\"实现步骤-4\"><a href=\"#实现步骤-4\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>客户端界面主要是GUI设计，主体页面分为登陆界面和聊天窗口，以及在线用户列表。</strong></li>\n<li><strong>GUI界面读者可以自行复制使用。</strong></li>\n<li><strong>登陆输入服务端ip和用户名后，要请求与服务端的登陆，然后立即为当前客户端分配一个读线程处理客户端的读数据消息。因为客户端可能随时会接收到服务端那边转发过来的各种即时消息信息。</strong></li>\n<li><strong>客户端登陆完成，服务端收到登陆的用户名后，会立即发来最新的用户列表给客户端更新。</strong></li>\n</ul>\n<h5 id=\"代码实现-4\"><a href=\"#代码实现-4\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p><strong>客户端主体代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientChat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ActionListener</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 1.设计界面  */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">JFrame</span> <span class=\"variable\">win</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>();</span><br><span class=\"line\">   <span class=\"comment\">/** 2.消息内容框架 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">JTextArea</span> <span class=\"variable\">smsContent</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">JTextArea</span>(<span class=\"number\">23</span> , <span class=\"number\">50</span>);</span><br><span class=\"line\">   <span class=\"comment\">/** 3.发送消息的框  */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">JTextArea</span> <span class=\"variable\">smsSend</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JTextArea</span>(<span class=\"number\">4</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\">   <span class=\"comment\">/** 4.在线人数的区域  */</span></span><br><span class=\"line\">   <span class=\"comment\">/** 存放人的数据 */</span></span><br><span class=\"line\">   <span class=\"comment\">/** 展示在线人数的窗口 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> JList&lt;String&gt; onLineUsers = <span class=\"keyword\">new</span> <span class=\"title class_\">JList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 是否私聊按钮</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">JCheckBox</span> <span class=\"variable\">isPrivateBn</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JCheckBox</span>(<span class=\"string\">&quot;私聊&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 消息按钮</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">JButton</span> <span class=\"variable\">sendBn</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;发送&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 登录界面</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> JFrame loginView;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> JTextField ipEt , nameEt , idEt;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Socket socket ;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ClientChat</span>().initView();</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/** 初始化聊天窗口的界面 */</span></span><br><span class=\"line\">      win.setSize(<span class=\"number\">650</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/** 展示登录界面  */</span></span><br><span class=\"line\">      displayLoginView();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/** 展示聊天界面 */</span></span><br><span class=\"line\">      <span class=\"comment\">//displayChatView();</span></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayChatView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">JPanel</span> <span class=\"variable\">bottomPanel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BorderLayout</span>());</span><br><span class=\"line\">      <span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\">      <span class=\"comment\">// 将消息框和按钮 添加到窗口的底端</span></span><br><span class=\"line\">      win.add(bottomPanel, BorderLayout.SOUTH);</span><br><span class=\"line\">      bottomPanel.add(smsSend);</span><br><span class=\"line\">      <span class=\"type\">JPanel</span> <span class=\"variable\">btns</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class=\"line\">      btns.add(sendBn);</span><br><span class=\"line\">      btns.add(isPrivateBn);</span><br><span class=\"line\">      bottomPanel.add(btns, BorderLayout.EAST);</span><br><span class=\"line\">      <span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\">      <span class=\"comment\">// 给发送消息按钮绑定点击事件监听器</span></span><br><span class=\"line\">      <span class=\"comment\">// 将展示消息区centerPanel添加到窗口的中间</span></span><br><span class=\"line\">      smsContent.setBackground(<span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(<span class=\"number\">0xdd</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0xdd</span>));</span><br><span class=\"line\">      <span class=\"comment\">// 让展示消息区可以滚动。</span></span><br><span class=\"line\">      win.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JScrollPane</span>(smsContent), BorderLayout.CENTER);</span><br><span class=\"line\">      smsContent.setEditable(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      <span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\">      <span class=\"comment\">// 用户列表和是否私聊放到窗口的最右边</span></span><br><span class=\"line\">      <span class=\"type\">Box</span> <span class=\"variable\">rightBox</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>(BoxLayout.Y_AXIS);</span><br><span class=\"line\">      onLineUsers.setFixedCellWidth(<span class=\"number\">120</span>);</span><br><span class=\"line\">      onLineUsers.setVisibleRowCount(<span class=\"number\">13</span>);</span><br><span class=\"line\">      rightBox.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JScrollPane</span>(onLineUsers));</span><br><span class=\"line\">      win.add(rightBox, BorderLayout.EAST);</span><br><span class=\"line\">      <span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\">      <span class=\"comment\">// 关闭窗口退出当前程序</span></span><br><span class=\"line\">      win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">      win.pack();  <span class=\"comment\">// swing 加上这句 就可以拥有关闭窗口的功能</span></span><br><span class=\"line\">      <span class=\"comment\">/** 设置窗口居中,显示出来  */</span></span><br><span class=\"line\">      setWindowCenter(win,<span class=\"number\">650</span>,<span class=\"number\">600</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 发送按钮绑定点击事件</span></span><br><span class=\"line\">      sendBn.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayLoginView</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/** 先让用户进行登录</span></span><br><span class=\"line\"><span class=\"comment\">       *  服务端ip</span></span><br><span class=\"line\"><span class=\"comment\">       *  用户名</span></span><br><span class=\"line\"><span class=\"comment\">       *  id</span></span><br><span class=\"line\"><span class=\"comment\">       *  */</span></span><br><span class=\"line\">      <span class=\"comment\">/** 显示一个qq的登录框     */</span></span><br><span class=\"line\">      loginView = <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;登录&quot;</span>);</span><br><span class=\"line\">      loginView.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">3</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">      loginView.setSize(<span class=\"number\">400</span>, <span class=\"number\">230</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">JPanel</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\">      <span class=\"type\">JLabel</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JLabel</span>(<span class=\"string\">&quot;   IP:&quot;</span>);</span><br><span class=\"line\">      ip.add(label);</span><br><span class=\"line\">      ipEt = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextField</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">      ip.add(ipEt);</span><br><span class=\"line\">      loginView.add(ip);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">JPanel</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\">      <span class=\"type\">JLabel</span> <span class=\"variable\">label1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JLabel</span>(<span class=\"string\">&quot;姓名:&quot;</span>);</span><br><span class=\"line\">      name.add(label1);</span><br><span class=\"line\">      nameEt = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextField</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">      name.add(nameEt);</span><br><span class=\"line\">      loginView.add(name);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">JPanel</span> <span class=\"variable\">btnView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\">      <span class=\"type\">JButton</span> <span class=\"variable\">login</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;登陆&quot;</span>);</span><br><span class=\"line\">      btnView.add(login);</span><br><span class=\"line\">      <span class=\"type\">JButton</span> <span class=\"variable\">cancle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;取消&quot;</span>);</span><br><span class=\"line\">      btnView.add(cancle);</span><br><span class=\"line\">      loginView.add(btnView);</span><br><span class=\"line\">      <span class=\"comment\">// 关闭窗口退出当前程序</span></span><br><span class=\"line\">      loginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">      setWindowCenter(loginView,<span class=\"number\">400</span>,<span class=\"number\">260</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/** 给登录和取消绑定点击事件 */</span></span><br><span class=\"line\">      login.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">      cancle.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWindowCenter</span><span class=\"params\">(JFrame frame, <span class=\"type\">int</span> width , <span class=\"type\">int</span> height, <span class=\"type\">boolean</span> flag)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/** 得到所在系统所在屏幕的宽高 */</span></span><br><span class=\"line\">      <span class=\"type\">Dimension</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> frame.getToolkit().getScreenSize();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/** 拿到电脑的宽 */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">width1</span> <span class=\"operator\">=</span> ds.width;</span><br><span class=\"line\">      <span class=\"comment\">/** 高 */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">height1</span> <span class=\"operator\">=</span> ds.height ;</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(width1 +<span class=\"string\">&quot;*&quot;</span> + height1);</span><br><span class=\"line\">      <span class=\"comment\">/** 设置窗口的左上角坐标 */</span></span><br><span class=\"line\">      frame.setLocation(width1/<span class=\"number\">2</span> - width/<span class=\"number\">2</span>, height1/<span class=\"number\">2</span> -height/<span class=\"number\">2</span>);</span><br><span class=\"line\">      frame.setVisible(flag);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/** 得到点击的事件源 */</span></span><br><span class=\"line\">      <span class=\"type\">JButton</span> <span class=\"variable\">btn</span> <span class=\"operator\">=</span> (JButton) e.getSource();</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(btn.getText())&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&quot;登陆&quot;</span>:</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> ipEt.getText().toString();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> nameEt.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// 校验参数是否为空</span></span><br><span class=\"line\">            <span class=\"comment\">// 错误提示</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span> ;</span><br><span class=\"line\">            <span class=\"comment\">// 12.1.2.0</span></span><br><span class=\"line\">            <span class=\"comment\">// \\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ip==<span class=\"literal\">null</span> || !ip.matches(<span class=\"string\">&quot;\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;&quot;</span>))&#123;</span><br><span class=\"line\">               msg = <span class=\"string\">&quot;请输入合法的服务端ip地址&quot;</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(name==<span class=\"literal\">null</span> || !name.matches(<span class=\"string\">&quot;\\\\S&#123;1,&#125;&quot;</span>))&#123;</span><br><span class=\"line\">               msg = <span class=\"string\">&quot;姓名必须1个字符以上&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!msg.equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">               <span class=\"comment\">/** msg有内容说明参数有为空 */</span></span><br><span class=\"line\">               <span class=\"comment\">// 参数一：弹出放到哪个窗口里面</span></span><br><span class=\"line\">               JOptionPane.showMessageDialog(loginView, msg);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 参数都合法了</span></span><br><span class=\"line\">                  <span class=\"comment\">// 当前登录的用户,去服务端登陆</span></span><br><span class=\"line\">                  <span class=\"comment\">/** 先把当前用户的名称展示到界面 */</span></span><br><span class=\"line\">                  win.setTitle(name);</span><br><span class=\"line\">                  <span class=\"comment\">// 去服务端登陆连接一个socket管道</span></span><br><span class=\"line\">                  socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, Constants.PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"comment\">//为客户端的socket分配一个线程 专门负责收消息</span></span><br><span class=\"line\">                  <span class=\"keyword\">new</span> <span class=\"title class_\">ClientReader</span>(<span class=\"built_in\">this</span>,socket).start();</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"comment\">// 带上用户信息过去</span></span><br><span class=\"line\">                  <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">                  dos.writeInt(<span class=\"number\">1</span>); <span class=\"comment\">// 登录消息</span></span><br><span class=\"line\">                  dos.writeUTF(name.trim());</span><br><span class=\"line\">                  dos.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"comment\">// 关系当前窗口 弹出聊天界面</span></span><br><span class=\"line\">                  loginView.dispose(); <span class=\"comment\">// 登录窗口销毁</span></span><br><span class=\"line\">                  displayChatView(); <span class=\"comment\">// 展示了聊天窗口了</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">                  e1.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&quot;取消&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\">/** 退出系统 */</span></span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&quot;发送&quot;</span>:</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>客户端socket处理线程：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\">    <span class=\"comment\">// 接收客户端界面，方便收到消息后，更新界面数据。</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> ClientChat clientChat ;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">ClientReader</span><span class=\"params\">(ClientChat clientChat, Socket socket)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.clientChat = clientChat;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">         <span class=\"comment\">/** 循环一直等待客户端的消息 */</span></span><br><span class=\"line\">         <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               <span class=\"comment\">// 在线人数消息回来了</span></span><br><span class=\"line\">               <span class=\"type\">String</span> <span class=\"variable\">nameDatas</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">               <span class=\"comment\">// 展示到在线人数的界面</span></span><br><span class=\"line\">               String[] names = nameDatas.split(Constants.SPILIT);</span><br><span class=\"line\"></span><br><span class=\"line\">               clientChat.onLineUsers.setListData(names);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>此处说明了如果启动客户端界面，以及登陆功能后，服务端收到新的登陆消息后，会响应一个在线列表用户回来给客户端更新在线人数！</strong></li>\n</ul>\n<h4 id=\"客户端发送消息逻辑\"><a href=\"#客户端发送消息逻辑\" class=\"headerlink\" title=\"客户端发送消息逻辑\"></a>客户端发送消息逻辑</h4><h5 id=\"目标-6\"><a href=\"#目标-6\" class=\"headerlink\" title=\"目标\"></a>目标</h5><p><strong>客户端发送群聊消息，@消息，以及私聊消息。</strong></p>\n<h5 id=\"实现步骤-5\"><a href=\"#实现步骤-5\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h5><ul>\n<li><strong>客户端启动后，在聊天界面需要通过发送按钮推送群聊消息，@消息，以及私聊消息。</strong></li>\n<li><img src=\"http://www.52uni.cn/usr/uploads/2023/07/1501451371.png\" alt=\"请输入图片描述\"></li>\n<li><strong>如果直接点击发送，默认发送群聊消息</strong></li>\n<li><strong>如果选中右侧在线列表某个用户，默认发送@消息</strong></li>\n<li><strong>如果选中右侧在线列表某个用户，然后选择右下侧私聊按钮默，认发送私聊消息。</strong></li>\n</ul>\n<h5 id=\"代码实现-5\"><a href=\"#代码实现-5\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p><strong>客户端主体代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientChat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ActionListener</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/** 1.设计界面  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">JFrame</span> <span class=\"variable\">win</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>();</span><br><span class=\"line\"><span class=\"comment\">/** 2.消息内容框架 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">JTextArea</span> <span class=\"variable\">smsContent</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">JTextArea</span>(<span class=\"number\">23</span> , <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"comment\">/** 3.发送消息的框  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">JTextArea</span> <span class=\"variable\">smsSend</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JTextArea</span>(<span class=\"number\">4</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"comment\">/** 4.在线人数的区域  */</span></span><br><span class=\"line\"><span class=\"comment\">/** 存放人的数据 */</span></span><br><span class=\"line\"><span class=\"comment\">/** 展示在线人数的窗口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> JList&lt;String&gt; onLineUsers = <span class=\"keyword\">new</span> <span class=\"title class_\">JList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否私聊按钮</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">JCheckBox</span> <span class=\"variable\">isPrivateBn</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JCheckBox</span>(<span class=\"string\">&quot;私聊&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 消息按钮</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">JButton</span> <span class=\"variable\">sendBn</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;发送&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登录界面</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JFrame loginView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> JTextField ipEt , nameEt , idEt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Socket socket ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ClientChat</span>().initView();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/** 初始化聊天窗口的界面 */</span></span><br><span class=\"line\">win.setSize(<span class=\"number\">650</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 展示登录界面  */</span></span><br><span class=\"line\">displayLoginView();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 展示聊天界面 */</span></span><br><span class=\"line\"><span class=\"comment\">//displayChatView();</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayChatView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JPanel</span> <span class=\"variable\">bottomPanel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BorderLayout</span>());</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 将消息框和按钮 添加到窗口的底端</span></span><br><span class=\"line\">win.add(bottomPanel, BorderLayout.SOUTH);</span><br><span class=\"line\">bottomPanel.add(smsSend);</span><br><span class=\"line\"><span class=\"type\">JPanel</span> <span class=\"variable\">btns</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class=\"line\">btns.add(sendBn);</span><br><span class=\"line\">btns.add(isPrivateBn);</span><br><span class=\"line\">bottomPanel.add(btns, BorderLayout.EAST);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 给发送消息按钮绑定点击事件监听器</span></span><br><span class=\"line\"><span class=\"comment\">// 将展示消息区centerPanel添加到窗口的中间</span></span><br><span class=\"line\">smsContent.setBackground(<span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(<span class=\"number\">0xdd</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0xdd</span>));</span><br><span class=\"line\"><span class=\"comment\">// 让展示消息区可以滚动。</span></span><br><span class=\"line\">win.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JScrollPane</span>(smsContent), BorderLayout.CENTER);</span><br><span class=\"line\">smsContent.setEditable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 用户列表和是否私聊放到窗口的最右边</span></span><br><span class=\"line\"><span class=\"type\">Box</span> <span class=\"variable\">rightBox</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>(BoxLayout.Y_AXIS);</span><br><span class=\"line\">onLineUsers.setFixedCellWidth(<span class=\"number\">120</span>);</span><br><span class=\"line\">onLineUsers.setVisibleRowCount(<span class=\"number\">13</span>);</span><br><span class=\"line\">rightBox.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JScrollPane</span>(onLineUsers));</span><br><span class=\"line\">win.add(rightBox, BorderLayout.EAST);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 关闭窗口退出当前程序</span></span><br><span class=\"line\">win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">win.pack();  <span class=\"comment\">// swing 加上这句 就可以拥有关闭窗口的功能</span></span><br><span class=\"line\"><span class=\"comment\">/** 设置窗口居中,显示出来  */</span></span><br><span class=\"line\">setWindowCenter(win,<span class=\"number\">650</span>,<span class=\"number\">600</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 发送按钮绑定点击事件</span></span><br><span class=\"line\">sendBn.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayLoginView</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 先让用户进行登录</span></span><br><span class=\"line\"><span class=\"comment\"> *  服务端ip</span></span><br><span class=\"line\"><span class=\"comment\"> *  用户名</span></span><br><span class=\"line\"><span class=\"comment\"> *  id</span></span><br><span class=\"line\"><span class=\"comment\"> *  */</span></span><br><span class=\"line\"><span class=\"comment\">/** 显示一个qq的登录框     */</span></span><br><span class=\"line\">loginView = <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;登录&quot;</span>);</span><br><span class=\"line\">loginView.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">3</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">loginView.setSize(<span class=\"number\">400</span>, <span class=\"number\">230</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JPanel</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\"><span class=\"type\">JLabel</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JLabel</span>(<span class=\"string\">&quot;   IP:&quot;</span>);</span><br><span class=\"line\">ip.add(label);</span><br><span class=\"line\">ipEt = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextField</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">ip.add(ipEt);</span><br><span class=\"line\">loginView.add(ip);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JPanel</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\"><span class=\"type\">JLabel</span> <span class=\"variable\">label1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JLabel</span>(<span class=\"string\">&quot;姓名:&quot;</span>);</span><br><span class=\"line\">name.add(label1);</span><br><span class=\"line\">nameEt = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextField</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">name.add(nameEt);</span><br><span class=\"line\">loginView.add(name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JPanel</span> <span class=\"variable\">btnView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\"><span class=\"type\">JButton</span> <span class=\"variable\">login</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;登陆&quot;</span>);</span><br><span class=\"line\">btnView.add(login);</span><br><span class=\"line\"><span class=\"type\">JButton</span> <span class=\"variable\">cancle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;取消&quot;</span>);</span><br><span class=\"line\">btnView.add(cancle);</span><br><span class=\"line\">loginView.add(btnView);</span><br><span class=\"line\"><span class=\"comment\">// 关闭窗口退出当前程序</span></span><br><span class=\"line\">loginView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">setWindowCenter(loginView,<span class=\"number\">400</span>,<span class=\"number\">260</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 给登录和取消绑定点击事件 */</span></span><br><span class=\"line\">login.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">cancle.addActionListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWindowCenter</span><span class=\"params\">(JFrame frame, <span class=\"type\">int</span> width , <span class=\"type\">int</span> height, <span class=\"type\">boolean</span> flag)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/** 得到所在系统所在屏幕的宽高 */</span></span><br><span class=\"line\"><span class=\"type\">Dimension</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> frame.getToolkit().getScreenSize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 拿到电脑的宽 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">width1</span> <span class=\"operator\">=</span> ds.width;</span><br><span class=\"line\"><span class=\"comment\">/** 高 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">height1</span> <span class=\"operator\">=</span> ds.height ;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(width1 +<span class=\"string\">&quot;*&quot;</span> + height1);</span><br><span class=\"line\"><span class=\"comment\">/** 设置窗口的左上角坐标 */</span></span><br><span class=\"line\">frame.setLocation(width1/<span class=\"number\">2</span> - width/<span class=\"number\">2</span>, height1/<span class=\"number\">2</span> -height/<span class=\"number\">2</span>);</span><br><span class=\"line\">frame.setVisible(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/** 得到点击的事件源 */</span></span><br><span class=\"line\"><span class=\"type\">JButton</span> <span class=\"variable\">btn</span> <span class=\"operator\">=</span> (JButton) e.getSource();</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(btn.getText())&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;登陆&quot;</span>:</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> ipEt.getText().toString();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> nameEt.getText().toString();</span><br><span class=\"line\"><span class=\"comment\">// 校验参数是否为空</span></span><br><span class=\"line\"><span class=\"comment\">// 错误提示</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span> ;</span><br><span class=\"line\"><span class=\"comment\">// 12.1.2.0</span></span><br><span class=\"line\"><span class=\"comment\">// \\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ip==<span class=\"literal\">null</span> || !ip.matches(<span class=\"string\">&quot;\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;&quot;</span>))&#123;</span><br><span class=\"line\">msg = <span class=\"string\">&quot;请输入合法的服务端ip地址&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(name==<span class=\"literal\">null</span> || !name.matches(<span class=\"string\">&quot;\\\\S&#123;1,&#125;&quot;</span>))&#123;</span><br><span class=\"line\">msg = <span class=\"string\">&quot;姓名必须1个字符以上&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!msg.equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\"><span class=\"comment\">/** msg有内容说明参数有为空 */</span></span><br><span class=\"line\"><span class=\"comment\">// 参数一：弹出放到哪个窗口里面</span></span><br><span class=\"line\">JOptionPane.showMessageDialog(loginView, msg);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 参数都合法了</span></span><br><span class=\"line\"><span class=\"comment\">// 当前登录的用户,去服务端登陆</span></span><br><span class=\"line\"><span class=\"comment\">/** 先把当前用户的名称展示到界面 */</span></span><br><span class=\"line\">win.setTitle(name);</span><br><span class=\"line\"><span class=\"comment\">// 去服务端登陆连接一个socket管道</span></span><br><span class=\"line\">socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(ip, Constants.PORT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为客户端的socket分配一个线程 专门负责收消息</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ClientReader</span>(<span class=\"built_in\">this</span>,socket).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带上用户信息过去</span></span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">dos.writeInt(<span class=\"number\">1</span>); <span class=\"comment\">// 登录消息</span></span><br><span class=\"line\">dos.writeUTF(name.trim());</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关系当前窗口 弹出聊天界面</span></span><br><span class=\"line\">loginView.dispose(); <span class=\"comment\">// 登录窗口销毁</span></span><br><span class=\"line\">displayChatView(); <span class=\"comment\">// 展示了聊天窗口了</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;取消&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/** 退出系统 */</span></span><br><span class=\"line\">System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;发送&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">// 得到发送消息的内容</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msgSend</span> <span class=\"operator\">=</span> smsSend.getText().toString();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!msgSend.trim().equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 发消息给服务端 */</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否对谁发消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">selectName</span> <span class=\"operator\">=</span> onLineUsers.getSelectedValue();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> ;<span class=\"comment\">// 群发 @消息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(selectName!=<span class=\"literal\">null</span>&amp;&amp;!selectName.equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">msgSend =(<span class=\"string\">&quot;@&quot;</span>+selectName+<span class=\"string\">&quot;,&quot;</span>+msgSend);</span><br><span class=\"line\"><span class=\"comment\">/** 判断是否选中了私法 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isPrivateBn.isSelected())&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 私法 */</span></span><br><span class=\"line\">flag = <span class=\"number\">3</span> ;<span class=\"comment\">//私发消息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">dos.writeInt(flag); <span class=\"comment\">// 群发消息  发送给所有人</span></span><br><span class=\"line\">dos.writeUTF(msgSend);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 告诉服务端我对谁私发</span></span><br><span class=\"line\">dos.writeUTF(selectName.trim());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dos.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">smsSend.setText(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>客户端socket处理线程：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClientReader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ClientChat clientChat ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ClientReader</span><span class=\"params\">(ClientChat clientChat, Socket socket)</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.clientChat = clientChat;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.socket = socket;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\"><span class=\"comment\">/** 循环一直等待客户端的消息 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** 读取当前的消息类型 ：登录,群发,私聊 , @消息 */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 在线人数消息回来了</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">nameDatas</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\"><span class=\"comment\">// 展示到在线人数的界面</span></span><br><span class=\"line\">String[] names = nameDatas.split(Constants.SPILIT);</span><br><span class=\"line\"></span><br><span class=\"line\">clientChat.onLineUsers.setListData(names);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//群发,私聊 , @消息 都是直接显示的。</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> dis.readUTF() ;</span><br><span class=\"line\">clientChat.smsContent.append(msg);</span><br><span class=\"line\"><span class=\"comment\">// 让消息界面滾動到底端</span></span><br><span class=\"line\">clientChat.smsContent.setCaretPosition(clientChat.smsContent.getText().length());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-11\"><a href=\"#小结-11\" class=\"headerlink\" title=\"小结\"></a>小结</h5><ul>\n<li><strong>此处实现了客户端发送群聊消息，@消息，以及私聊消息。</strong></li>\n<li><strong>如果直接点击发送，默认发送群聊消息</strong></li>\n<li><strong>如果选中右侧在线列表某个用户，默认发送@消息</strong></li>\n<li><strong>如果选中右侧在线列表某个用户，然后选择右下侧私聊按钮默，认发送私聊消息。</strong></li>\n</ul>\n<h1 id=\"第四章-JAVA-NIO深入剖析\"><a href=\"#第四章-JAVA-NIO深入剖析\" class=\"headerlink\" title=\"第四章 JAVA NIO深入剖析\"></a>第四章 JAVA NIO深入剖析</h1><p><strong>在讲解利用NIO实现通信架构之前，我们需要先来了解一下NIO的基本特点和使用。</strong></p>\n<h2 id=\"4-1-Java-NIO-基本介绍\"><a href=\"#4-1-Java-NIO-基本介绍\" class=\"headerlink\" title=\"4.1 Java NIO 基本介绍\"></a>4.1 Java NIO 基本介绍</h2><ul>\n<li><strong>Java NIO（New IO）也有人称之为 java non-blocking IO是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面</strong> <strong>向缓冲区</strong>的、基于<strong>通道</strong>的IO操作。NIO将以更加高效的方式进行文件的读写操作。NIO可以理解为非阻塞IO,传统的IO的read和write只能阻塞执行，线程在读写IO期间不能干其他事情，比如调用socket.read()时，如果服务器一直没有数据传输过来，线程就一直阻塞，而NIO中可以配置socket为非阻塞模式。</li>\n<li><strong>NIO 相关类都被放在 java.nio 包及子包下，并且对原 java.io 包中的很多类进行改写。</strong></li>\n<li><strong>NIO 有三大核心部分：</strong> <strong>Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></li>\n<li><strong>Java NIO 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</strong></li>\n<li><strong>通俗理解：NIO 是可以做到用一个线程来处理多个操作的。假设有 1000 个请求过来,根据实际情况，可以分配20 或者 80个线程来处理。不像之前的阻塞 IO 那样，非得分配 1000 个。</strong></li>\n</ul>\n<h2 id=\"4-2-NIO-和-BIO-的比较\"><a href=\"#4-2-NIO-和-BIO-的比较\" class=\"headerlink\" title=\"4.2 NIO 和 BIO 的比较\"></a>4.2 NIO 和 BIO 的比较</h2><ul>\n<li><strong>BIO 以流的方式处理数据,而 NIO 以块的方式处理数据,块 I&#x2F;O 的效率比流 I&#x2F;O 高很多</strong></li>\n<li><strong>BIO 是阻塞的，NIO 则是非阻塞的</strong></li>\n<li><strong>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel(通道)和 Buffer(缓冲区)进行操作，数据总是从通道</strong><br><strong>读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择器)用于监听多个通道的事件（比如：连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>NIO</strong></th>\n<th><strong>BIO</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>面向缓冲区（Buffer）</strong></td>\n<td><strong>面向流（Stream）</strong></td>\n</tr>\n<tr>\n<td><strong>非阻塞（Non Blocking IO）</strong></td>\n<td><strong>阻塞IO(Blocking IO)</strong></td>\n</tr>\n<tr>\n<td><strong>选择器（Selectors）</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"4-3-NIO-三大核心原理示意图\"><a href=\"#4-3-NIO-三大核心原理示意图\" class=\"headerlink\" title=\"4.3 NIO 三大核心原理示意图\"></a>4.3 NIO 三大核心原理示意图</h2><p><strong>NIO 有三大核心部分：Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></p>\n<h3 id=\"Buffer缓冲区\"><a href=\"#Buffer缓冲区\" class=\"headerlink\" title=\"Buffer缓冲区\"></a>Buffer缓冲区</h3><p><strong>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。相比较直接对数组的操作，Buffer API更加容易操作和管理。</strong></p>\n<h3 id=\"Channel（通道）\"><a href=\"#Channel（通道）\" class=\"headerlink\" title=\"Channel（通道）\"></a><strong>Channel（通道）</strong></h3><p><strong>Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的（input或output)读写通常是单向的。 通道可以非阻塞读取和写入通道，通道可以支持读取或写入缓冲区，也支持异步地读写。</strong></p>\n<h3 id=\"Selector选择器\"><a href=\"#Selector选择器\" class=\"headerlink\" title=\"Selector选择器\"></a>Selector选择器</h3><p><strong>Selector是 一个Java NIO组件，可以能够检查一个或多个 NIO 通道，并确定哪些通道已经准备好进行读取或写入。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/414462545.png\" alt=\"请输入图片描述\"></p>\n<ul>\n<li><strong>每个 channel 都会对应一个 Buffer</strong></li>\n<li><strong>一个线程对应Selector ， 一个Selector对应多个 channel(连接)</strong></li>\n<li><strong>程序切换到哪个 channel 是由事件决定的</strong></li>\n<li><strong>Selector 会根据不同的事件，在各个通道上切换</strong></li>\n<li><strong>Buffer 就是一个内存块 ， 底层是一个数组</strong></li>\n<li><strong>数据的读取写入是通过 Buffer完成的 , BIO 中要么是输入流，或者是输出流, 不能双向，但是 NIO 的 Buffer 是可以读也可以写。</strong></li>\n<li><strong>Java NIO系统的核心在于：通道(Channel)和缓冲区 (Buffer)。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。简而言之，Channel 负责传输， Buffer 负责存取数据</strong></li>\n</ul>\n<h2 id=\"4-4-NIO核心一：缓冲区-Buffer\"><a href=\"#4-4-NIO核心一：缓冲区-Buffer\" class=\"headerlink\" title=\"4.4 NIO核心一：缓冲区(Buffer)\"></a>4.4 NIO核心一：缓冲区(Buffer)</h2><h3 id=\"缓冲区（Buffer）\"><a href=\"#缓冲区（Buffer）\" class=\"headerlink\" title=\"缓冲区（Buffer）\"></a>缓冲区（Buffer）</h3><p><strong>一个用于特定基本数据类 型的容器。由 java.nio 包定义的，所有缓冲区 都是 Buffer 抽象类的子类.。Java NIO 中的 Buffer 主要用于与 NIO 通道进行 交互，数据是从通道读入缓冲区，从缓冲区写入通道中的</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/631677983.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"Buffer-类及其子类\"><a href=\"#Buffer-类及其子类\" class=\"headerlink\" title=\"Buffer 类及其子类\"></a><strong>Buffer 类及其子类</strong></h3><p><strong>Buffer</strong> 就像一个数组，可以保存多个相同类型的数据。根 据数据类型不同 ，有以下 Buffer 常用子类：</p>\n<ul>\n<li><strong>ByteBuffer</strong></li>\n<li><strong>CharBuffer</strong></li>\n<li><strong>ShortBuffer</strong></li>\n<li><strong>IntBuffer</strong></li>\n<li><strong>LongBuffer</strong></li>\n<li><strong>FloatBuffer</strong></li>\n<li><strong>DoubleBuffer</strong></li>\n</ul>\n<p><strong>上述 Buffer 类 他们都采用相似的方法进行管理数据，只是各自 管理的数据类型不同而已。都是通过如下方法获取一个 Buffer 对象：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> XxxBuffer <span class=\"title function_\">allocate</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> : 创建一个容量为capacity 的 XxxBuffer 对象</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓冲区的基本属性\"><a href=\"#缓冲区的基本属性\" class=\"headerlink\" title=\"缓冲区的基本属性\"></a>缓冲区的基本属性</h3><p>**Buffer 中的重要概念： **</p>\n<ul>\n<li><strong>容量 (capacity)</strong> ：作为一个内存块，Buffer具有一定的固定大小，也称为”容量”，缓冲区容量不能为负，并且创建后不能更改。</li>\n<li>**限制 (limit)**：表示缓冲区中可以操作数据的大小（limit 后数据不能进行读写）。缓冲区的限制不能为负，并且不能大于其容量。 <strong>写入模式，限制等于buffer的容量。读取模式下，limit等于写入的数据量</strong>。</li>\n<li>**位置 (position)**：下一个要读取或写入的数据的索引。缓冲区的位置不能为 负，并且不能大于其限制</li>\n<li><strong>标记 (mark)与重置 (reset)<strong>：</strong>标记是一个索引，通过 Buffer 中的 mark() 方法 指定 Buffer 中一个特定的 position，之后可以通过调用 reset() 方法恢复到这 个 position.</strong></li>\n<li><strong>标记、位置、限制、容量遵守以下不变式： 0 &lt;&#x3D; mark &lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</strong> </li>\n<li><strong>图示:</strong></li>\n<li><img src=\"http://www.52uni.cn/usr/uploads/2023/07/2863568899.png\" alt=\"请输入图片描述\"></li>\n</ul>\n<h3 id=\"Buffer常见方法\"><a href=\"#Buffer常见方法\" class=\"headerlink\" title=\"Buffer常见方法\"></a>Buffer常见方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer clear() 清空缓冲区并返回对缓冲区的引用</span><br><span class=\"line\">Buffer flip() 为 将缓冲区的界限设置为当前位置，并将当前位置充值为 0</span><br><span class=\"line\">int capacity() 返回 Buffer 的 capacity 大小</span><br><span class=\"line\">boolean hasRemaining() 判断缓冲区中是否还有元素</span><br><span class=\"line\">int limit() 返回 Buffer 的界限(limit) 的位置</span><br><span class=\"line\">Buffer limit(int n) 将设置缓冲区界限为 n, 并返回一个具有新 limit 的缓冲区对象</span><br><span class=\"line\">Buffer mark() 对缓冲区设置标记</span><br><span class=\"line\">int position() 返回缓冲区的当前位置 position</span><br><span class=\"line\">Buffer position(int n) 将设置缓冲区的当前位置为 n , 并返回修改后的 Buffer 对象</span><br><span class=\"line\">int remaining() 返回 position 和 limit 之间的元素个数</span><br><span class=\"line\">Buffer reset() 将位置 position 转到以前设置的 mark 所在的位置</span><br><span class=\"line\">Buffer rewind() 将位置设为为 0， 取消设置的 mark</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓冲区的数据操作\"><a href=\"#缓冲区的数据操作\" class=\"headerlink\" title=\"缓冲区的数据操作\"></a>缓冲区的数据操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer 所有子类提供了两个用于数据操作的方法：get()put() 方法</span><br><span class=\"line\">取获取 Buffer中的数据</span><br><span class=\"line\">get() ：读取单个字节</span><br><span class=\"line\">get(byte[] dst)：批量读取多个字节到 dst 中</span><br><span class=\"line\">get(int index)：读取指定索引位置的字节(不会移动 position)</span><br><span class=\"line\">    </span><br><span class=\"line\">放到 入数据到 Buffer 中 中</span><br><span class=\"line\">put(byte b)：将给定单个字节写入缓冲区的当前位置</span><br><span class=\"line\">put(byte[] src)：将 src 中的字节写入缓冲区的当前位置</span><br><span class=\"line\">put(int index, byte b)：将指定字节写入缓冲区的索引位置(不会移动 position)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用Buffer读写数据一般遵循以下四个步骤：</strong></p>\n<ul>\n<li><strong>1.写入数据到Buffer</strong></li>\n<li><strong>2.调用flip()方法，转换为读取模式</strong></li>\n<li><strong>3.从Buffer中读取数据</strong></li>\n<li><strong>4.调用buffer.clear()方法或者buffer.compact()方法清除缓冲区</strong></li>\n</ul>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBuffer</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//分配直接缓冲区</span></span><br><span class=\"line\">      <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">      System.out.println(buf.isDirect());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;itheima&quot;</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      buf.put(str.getBytes());</span><br><span class=\"line\">      </span><br><span class=\"line\">      buf.flip();</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">byte</span>[] dst = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[buf.limit()];</span><br><span class=\"line\">      buf.get(dst, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(dst, <span class=\"number\">0</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//mark() : 标记</span></span><br><span class=\"line\">      buf.mark();</span><br><span class=\"line\">      </span><br><span class=\"line\">      buf.get(dst, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(dst, <span class=\"number\">2</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//reset() : 恢复到 mark 的位置</span></span><br><span class=\"line\">      buf.reset();</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//判断缓冲区中是否还有剩余数据</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(buf.hasRemaining())&#123;</span><br><span class=\"line\">         <span class=\"comment\">//获取缓冲区中可以操作的数量</span></span><br><span class=\"line\">         System.out.println(buf.remaining());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;itheima&quot;</span>;</span><br><span class=\"line\">      <span class=\"comment\">//1. 分配一个指定大小的缓冲区</span></span><br><span class=\"line\">      <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------allocate()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//2. 利用 put() 存入数据到缓冲区中</span></span><br><span class=\"line\">      buf.put(str.getBytes());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------put()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//3. 切换读取数据模式</span></span><br><span class=\"line\">      buf.flip();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------flip()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//4. 利用 get() 读取缓冲区中的数据</span></span><br><span class=\"line\">      <span class=\"type\">byte</span>[] dst = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[buf.limit()];</span><br><span class=\"line\">      buf.get(dst);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(dst, <span class=\"number\">0</span>, dst.length));</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------get()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      <span class=\"comment\">//5. rewind() : 可重复读</span></span><br><span class=\"line\">      buf.rewind();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------rewind()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//6. clear() : 清空缓冲区. 但是缓冲区中的数据依然存在，但是处于“被遗忘”状态</span></span><br><span class=\"line\">      buf.clear();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;-----------------clear()----------------&quot;</span>);</span><br><span class=\"line\">      System.out.println(buf.position());</span><br><span class=\"line\">      System.out.println(buf.limit());</span><br><span class=\"line\">      System.out.println(buf.capacity());</span><br><span class=\"line\">      System.out.println((<span class=\"type\">char</span>)buf.get());</span><br><span class=\"line\">      </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"直接与非直接缓冲区\"><a href=\"#直接与非直接缓冲区\" class=\"headerlink\" title=\"直接与非直接缓冲区\"></a>直接与非直接缓冲区</h3><p><strong>什么是直接内存与非直接内存</strong></p>\n<p><strong>根据官方文档的描述：</strong></p>\n<p><code>byte byffer</code>可以是两种类型，一种是基于直接内存（也就是非堆内存）；另一种是非直接内存（也就是堆内存）。对于直接内存来说，JVM将会在IO操作上具有更高的性能，因为它直接作用于本地系统的IO操作。而非直接内存，也就是堆内存中的数据，如果要作IO操作，会先从本进程内存复制到直接内存，再利用本地IO处理。</p>\n<p><strong>从数据流的角度，非直接内存是下面这样的作用链：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地IO--&gt;直接内存--&gt;非直接内存--&gt;直接内存--&gt;本地IO</span><br></pre></td></tr></table></figure>\n\n<p><strong>而直接内存是：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地IO--&gt;直接内存--&gt;本地IO</span><br></pre></td></tr></table></figure>\n\n<p><strong>很明显，在做IO处理时，比如网络发送大量数据时，直接内存会具有更高的效率。直接内存使用allocateDirect创建，但是它比申请普通的堆内存需要耗费更高的性能。不过，这部分的数据是在JVM之外的，因此它不会占用应用的内存。所以呢，当你有很大的数据要缓存，并且它的生命周期又很长，那么就比较适合使用直接内存。只是一般来说，如果不是能带来很明显的性能提升，还是推荐直接使用堆内存。字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其 isDirect()  方法来确定。</strong></p>\n<p><strong>使用场景</strong></p>\n<ul>\n<li><strong>1 有很大的数据需要存储，它的生命周期又很长</strong></li>\n<li><strong>2 适合频繁的IO操作，比如网络并发场景</strong></li>\n</ul>\n<h2 id=\"4-5-NIO核心二：通道-Channel\"><a href=\"#4-5-NIO核心二：通道-Channel\" class=\"headerlink\" title=\"4.5 NIO核心二：通道(Channel)\"></a>4.5 NIO核心二：通道(Channel)</h2><h3 id=\"通道Channe概述\"><a href=\"#通道Channe概述\" class=\"headerlink\" title=\"通道Channe概述\"></a>通道Channe概述</h3><p><strong>通道（Channel）：由 java.nio.channels 包定义 的。Channel 表示 IO 源与目标打开的连接。 Channel 类似于传统的“流”。只不过 Channel 本身不能直接访问数据，Channel 只能与 Buffer 进行交互。</strong></p>\n<p><strong>1、 NIO 的通道类似于流，但有些区别如下：</strong></p>\n<ul>\n<li><strong>通道可以同时进行读写，而流只能读或者只能写</strong></li>\n<li><strong>通道可以实现异步读写数据</strong></li>\n<li><strong>通道可以从缓冲读数据，也可以写数据到缓冲:</strong></li>\n</ul>\n<p><strong>2、BIO 中的 stream 是单向的，例如 FileInputStream 对象只能进行读取数据的操作，而 NIO 中的通道(Channel) 是双向的，可以读操作，也可以写操作。</strong></p>\n<p><strong>3、Channel 在 NIO 中是一个接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Channel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Closeable</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用的Channel实现类\"><a href=\"#常用的Channel实现类\" class=\"headerlink\" title=\"常用的Channel实现类\"></a>常用的Channel实现类</h3><ul>\n<li><strong>FileChannel：用于读取、写入、映射和操作文件的通道。</strong></li>\n<li><strong>DatagramChannel：通过 UDP 读写网络中的数据通道。</strong></li>\n<li><strong>SocketChannel：通过 TCP 读写网络中的数据。</strong></li>\n<li><strong>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。 【ServerSocketChanne 类似 ServerSocket , SocketChannel 类似 Socket】</strong></li>\n</ul>\n<h3 id=\"FileChannel-类\"><a href=\"#FileChannel-类\" class=\"headerlink\" title=\"FileChannel 类\"></a>FileChannel 类</h3><p><strong>获取通道的一种方式是对支持通道的对象调用getChannel() 方法。支持通道的类如下：</strong></p>\n<ul>\n<li><strong>FileInputStream</strong></li>\n<li><strong>FileOutputStream</strong></li>\n<li><strong>RandomAccessFile</strong></li>\n<li><strong>DatagramSocket</strong></li>\n<li><strong>Socket</strong></li>\n<li><strong>ServerSocket</strong><br><strong>获取通道的其他方式是使用 Files 类的静态方法 newByteChannel() 获取字节通道。或者通过通道的静态方法 open() 打开并返回指定通道</strong></li>\n</ul>\n<h3 id=\"FileChannel的常用方法\"><a href=\"#FileChannel的常用方法\" class=\"headerlink\" title=\"FileChannel的常用方法\"></a>FileChannel的常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer dst)</span> 从 从  Channel 到 中读取数据到  ByteBuffer</span><br><span class=\"line\"><span class=\"type\">long</span>  <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts)</span> 将 将  Channel 到 中的数据“分散”到  ByteBuffer[]</span><br><span class=\"line\"><span class=\"type\">int</span>  <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer src)</span> 将 将  ByteBuffer 到 中的数据写入到  Channel</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs)</span> 将 将  ByteBuffer[] 到 中的数据“聚集”到  Channel</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">position</span><span class=\"params\">()</span> 返回此通道的文件位置</span><br><span class=\"line\">FileChannel <span class=\"title function_\">position</span><span class=\"params\">(<span class=\"type\">long</span> p)</span> 设置此通道的文件位置</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> 返回此通道的文件的当前大小</span><br><span class=\"line\">FileChannel <span class=\"title function_\">truncate</span><span class=\"params\">(<span class=\"type\">long</span> s)</span> 将此通道的文件截取为给定大小</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">force</span><span class=\"params\">(<span class=\"type\">boolean</span> metaData)</span> 强制将所有对此通道的文件更新写入到存储设备中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例1-本地文件写数据\"><a href=\"#案例1-本地文件写数据\" class=\"headerlink\" title=\"案例1-本地文件写数据\"></a>案例1-本地文件写数据</h3><p><strong>需求：使用前面学习后的 ByteBuffer(缓冲) 和 FileChannel(通道)， 将 “hello,黑马Java程序员！” 写入到 data.txt 中.</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.FileChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、字节输出流通向目标文件</span></span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data01.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 2、得到字节输出流对应的通道Channel</span></span><br><span class=\"line\">            <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">            <span class=\"comment\">// 3、分配缓冲区</span></span><br><span class=\"line\">            <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            buffer.put(<span class=\"string\">&quot;hello,黑马Java程序员！&quot;</span>.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">// 4、把缓冲区切换成写出模式</span></span><br><span class=\"line\">            buffer.flip();</span><br><span class=\"line\">            channel.write(buffer);</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;写数据到文件中！&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例2-本地文件读数据\"><a href=\"#案例2-本地文件读数据\" class=\"headerlink\" title=\"案例2-本地文件读数据\"></a>案例2-本地文件读数据</h3><p><strong>需求：使用前面学习后的 ByteBuffer(缓冲) 和 FileChannel(通道)， 将 data01.txt 中的数据读入到程序，并显示在控制台屏幕</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、定义一个文件字节输入流与源文件接通</span></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data01.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、需要得到文件字节输入流的文件通道</span></span><br><span class=\"line\">        <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> is.getChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 3、定义一个缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4、读取数据到缓冲区</span></span><br><span class=\"line\">        channel.read(buffer);</span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 5、读取出缓冲区中的数据并输出即可</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer.array(),<span class=\"number\">0</span>,buffer.remaining());</span><br><span class=\"line\">        System.out.println(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例3-使用Buffer完成文件复制\"><a href=\"#案例3-使用Buffer完成文件复制\" class=\"headerlink\" title=\"案例3-使用Buffer完成文件复制\"></a>案例3-使用Buffer完成文件复制</h3><p><strong>使用 FileChannel(通道) ，完成文件的拷贝。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">copy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 源文件</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">srcFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C:\\\\Users\\\\dlei\\\\Desktop\\\\BIO,NIO,AIO\\\\文件\\\\壁纸.jpg&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">destFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C:\\\\Users\\\\dlei\\\\Desktop\\\\BIO,NIO,AIO\\\\文件\\\\壁纸new.jpg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 得到一个字节字节输入流</span></span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(srcFile);</span><br><span class=\"line\">    <span class=\"comment\">// 得到一个字节输出流</span></span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(destFile);</span><br><span class=\"line\">    <span class=\"comment\">// 得到的是文件通道</span></span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">isChannel</span> <span class=\"operator\">=</span> fis.getChannel();</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">osChannel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">// 分配缓冲区</span></span><br><span class=\"line\">    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 必须先清空缓冲然后再写入数据到缓冲区</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        <span class=\"comment\">// 开始读取一次数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> isChannel.read(buffer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 已经读取了数据 ，把缓冲区的模式切换成可读模式</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 把数据写出到</span></span><br><span class=\"line\">        osChannel.write(buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    isChannel.close();</span><br><span class=\"line\">    osChannel.close();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;复制完成！&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例4-分散-Scatter-和聚集-Gather\"><a href=\"#案例4-分散-Scatter-和聚集-Gather\" class=\"headerlink\" title=\"案例4-分散 (Scatter) 和聚集 (Gather)\"></a>案例4-分散 (Scatter) 和聚集 (Gather)</h3><p><strong>分散读取（Scatter ）:是指把Channel通道的数据读入到多个缓冲区中去</strong></p>\n<p><strong>聚集写入（Gathering ）是指将多个 Buffer 中的数据“聚集”到 Channel。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分散和聚集</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\"><span class=\"type\">RandomAccessFile</span> <span class=\"variable\">raf1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomAccessFile</span>(<span class=\"string\">&quot;1.txt&quot;</span>, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//1. 获取通道</span></span><br><span class=\"line\"><span class=\"type\">FileChannel</span> <span class=\"variable\">channel1</span> <span class=\"operator\">=</span> raf1.getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 分配指定大小的缓冲区</span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf1</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf2</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 分散读取</span></span><br><span class=\"line\">ByteBuffer[] bufs = &#123;buf1, buf2&#125;;</span><br><span class=\"line\">channel1.read(bufs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (ByteBuffer byteBuffer : bufs) &#123;</span><br><span class=\"line\">byteBuffer.flip();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bufs[<span class=\"number\">0</span>].array(), <span class=\"number\">0</span>, bufs[<span class=\"number\">0</span>].limit()));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bufs[<span class=\"number\">1</span>].array(), <span class=\"number\">0</span>, bufs[<span class=\"number\">1</span>].limit()));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 聚集写入</span></span><br><span class=\"line\"><span class=\"type\">RandomAccessFile</span> <span class=\"variable\">raf2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomAccessFile</span>(<span class=\"string\">&quot;2.txt&quot;</span>, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">FileChannel</span> <span class=\"variable\">channel2</span> <span class=\"operator\">=</span> raf2.getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel2.write(bufs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例5-transferFrom\"><a href=\"#案例5-transferFrom\" class=\"headerlink\" title=\"案例5-transferFrom()\"></a>案例5-transferFrom()</h3><p><strong>从目标通道中去复制原通道数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、字节输入管道</span></span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data01.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">isChannel</span> <span class=\"operator\">=</span> is.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">// 2、字节输出流管道</span></span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data03.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">osChannel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">// 3、复制</span></span><br><span class=\"line\">    osChannel.transferFrom(isChannel,isChannel.position(),isChannel.size());</span><br><span class=\"line\">    isChannel.close();</span><br><span class=\"line\">    osChannel.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例6-transferTo\"><a href=\"#案例6-transferTo\" class=\"headerlink\" title=\"案例6-transferTo()\"></a>案例6-transferTo()</h3><p><strong>把原通道数据复制到目标通道</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、字节输入管道</span></span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data01.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">isChannel</span> <span class=\"operator\">=</span> is.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">// 2、字节输出流管道</span></span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data04.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">osChannel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">// 3、复制</span></span><br><span class=\"line\">    isChannel.transferTo(isChannel.position() , isChannel.size() , osChannel);</span><br><span class=\"line\">    isChannel.close();</span><br><span class=\"line\">    osChannel.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6-NIO核心三：选择器-Selector\"><a href=\"#4-6-NIO核心三：选择器-Selector\" class=\"headerlink\" title=\"4.6 NIO核心三：选择器(Selector)\"></a>4.6 NIO核心三：选择器(Selector)</h2><h3 id=\"选择器-Selector-概述\"><a href=\"#选择器-Selector-概述\" class=\"headerlink\" title=\"选择器(Selector)概述\"></a>选择器(Selector)概述</h3><p><strong>选择器（Selector） 是 SelectableChannle 对象的多路复用器，Selector 可以同时监控多个 SelectableChannel 的 IO 状况，也就是说，利用 Selector可使一个单独的线程管理多个 Channel。Selector 是非阻塞 IO 的核心</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/2394702029.png\" alt=\"请输入图片描述\"></p>\n<ul>\n<li><strong>Java 的 NIO，用非阻塞的 IO 方式。可以用一个线程，处理多个的客户端连接，就会使用到 Selector(选择器)</strong></li>\n<li><strong>Selector 能够检测多个注册的通道上是否有事件发生(注意:多个 Channel 以事件的方式可以注册到同一个</strong><br><strong>Selector)，如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管</strong><br><strong>理多个通道，也就是管理多个连接和请求。</strong></li>\n<li><strong>只有在 连接&#x2F;通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都</strong><br><strong>创建一个线程，不用去维护多个线程</strong></li>\n<li><strong>避免了多线程之间的上下文切换导致的开销</strong></li>\n</ul>\n<h3 id=\"选择-器（Selector）的应用\"><a href=\"#选择-器（Selector）的应用\" class=\"headerlink\" title=\"选择 器（Selector）的应用\"></a>选择 器（Selector）的应用</h3><p><strong>创建 Selector ：通过调用 Selector.open() 方法创建一个 Selector。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure>\n\n<p><strong>向选择器注册通道：SelectableChannel.register(Selector sel, int ops)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1. 获取通道</span><br><span class=\"line\">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class=\"line\">//2. 切换非阻塞模式</span><br><span class=\"line\">ssChannel.configureBlocking(false);</span><br><span class=\"line\">//3. 绑定连接</span><br><span class=\"line\">ssChannel.bind(new InetSocketAddress(9898));</span><br><span class=\"line\">//4. 获取选择器</span><br><span class=\"line\">Selector selector = Selector.open();</span><br><span class=\"line\">//5. 将通道注册到选择器上, 并且指定“监听接收事件”</span><br><span class=\"line\">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure>\n\n<p><strong>当调用 register(Selector sel, int ops) 将通道注册选择器时，选择器对通道的监听事件，需要通过第二个参数 ops 指定。可以监听的事件类型（用 可使用 SelectionKey  的四个常量 表示）：</strong></p>\n<ul>\n<li><strong>读 : SelectionKey.OP_READ （1）</strong></li>\n<li><strong>写 : SelectionKey.OP_WRITE （4）</strong></li>\n<li><strong>连接 : SelectionKey.OP_CONNECT （8）</strong></li>\n<li><strong>接收 : SelectionKey.OP_ACCEPT （16）</strong></li>\n<li><strong>若注册时不止监听一个事件，则可以使用“位或”操作符连接。</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int interestSet = SelectionKey.OP_READ|SelectionKey.OP_WRITE </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-7-NIO非阻塞式网络通信原理分析\"><a href=\"#4-7-NIO非阻塞式网络通信原理分析\" class=\"headerlink\" title=\"4.7 NIO非阻塞式网络通信原理分析\"></a>4.7 NIO非阻塞式网络通信原理分析</h2><h3 id=\"Selector-示意图和特点说明\"><a href=\"#Selector-示意图和特点说明\" class=\"headerlink\" title=\"Selector 示意图和特点说明\"></a>Selector 示意图和特点说明</h3><p><strong>Selector可以实现： 一个 I&#x2F;O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I&#x2F;O 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</strong></p>\n<p><img src=\"http://www.52uni.cn/usr/uploads/2023/07/414462545.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"服务端流程\"><a href=\"#服务端流程\" class=\"headerlink\" title=\"服务端流程\"></a>服务端流程</h3><ul>\n<li><p><strong>1、当客户端连接服务端时，服务端会通过 ServerSocketChannel 得到 SocketChannel：1. 获取通道</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>2、切换非阻塞模式</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssChannel.configureBlocking(false);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>3、绑定连接</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssChannel.bind(new InetSocketAddress(9999));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>4、 获取选择器</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>5、 将通道注册到选择器上, 并且指定“监听接收事件”</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>6、轮询式的获取选择器上已经“准备就绪”的事件</strong></p>\n<hr>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//轮询式的获取选择器上已经“准备就绪”的事件</span></span><br><span class=\"line\"> <span class=\"keyword\">while</span> (selector.select() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;轮一轮&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)”</span></span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//8. 获取准备“就绪”的是事件</span></span><br><span class=\"line\">            <span class=\"type\">SelectionKey</span> <span class=\"variable\">sk</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            <span class=\"comment\">//9. 判断具体是什么事件准备就绪</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sk.isAcceptable()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//10. 若“接收就绪”，获取客户端连接</span></span><br><span class=\"line\">                <span class=\"type\">SocketChannel</span> <span class=\"variable\">sChannel</span> <span class=\"operator\">=</span> ssChannel.accept();</span><br><span class=\"line\">                <span class=\"comment\">//11. 切换非阻塞模式</span></span><br><span class=\"line\">                sChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                <span class=\"comment\">//12. 将该通道注册到选择器上</span></span><br><span class=\"line\">                sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sk.isReadable()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class=\"line\">                <span class=\"type\">SocketChannel</span> <span class=\"variable\">sChannel</span> <span class=\"operator\">=</span> (SocketChannel) sk.channel();</span><br><span class=\"line\">                <span class=\"comment\">//14. 读取数据</span></span><br><span class=\"line\">                <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((len = sChannel.read(buf)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    buf.flip();</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf.array(), <span class=\"number\">0</span>, len));</span><br><span class=\"line\">                    buf.clear();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//15. 取消选择键 SelectionKey</span></span><br><span class=\"line\">            it.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"客户端流程\"><a href=\"#客户端流程\" class=\"headerlink\" title=\"客户端流程\"></a>客户端流程</h3><ul>\n<li><ol>\n<li><p><strong>获取通道</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SocketChannel sChannel = SocketChannel.open(new InetSocketAddress(&quot;127.0.0.1&quot;, 9999));</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><p><strong>切换非阻塞模式</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sChannel.configureBlocking(false);</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><strong>分配指定大小的缓冲区</strong></li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(1024);</span><br></pre></td></tr></table></figure>\n</li>\n<li><ol start=\"4\">\n<li><strong>发送数据给服务端</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(scan.hasNext())&#123;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">buf.put((<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>).format(System.currentTimeMillis())</span><br><span class=\"line\">+ <span class=\"string\">&quot;\\n&quot;</span> + str).getBytes());</span><br><span class=\"line\">buf.flip();</span><br><span class=\"line\">sChannel.write(buf);</span><br><span class=\"line\">buf.clear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">sChannel.close();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-8-NIO非阻塞式网络通信入门案例\"><a href=\"#4-8-NIO非阻塞式网络通信入门案例\" class=\"headerlink\" title=\"4.8 NIO非阻塞式网络通信入门案例\"></a>4.8 NIO非阻塞式网络通信入门案例</h2><p><strong>需求：服务端接收客户端的连接请求，并接收多个客户端发送过来的事件。</strong></p>\n<h3 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h3></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 客户端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">//1. 获取通道</span></span><br><span class=\"line\"><span class=\"type\">SocketChannel</span> <span class=\"variable\">sChannel</span> <span class=\"operator\">=</span> SocketChannel.open(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>));</span><br><span class=\"line\"><span class=\"comment\">//2. 切换非阻塞模式</span></span><br><span class=\"line\">sChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//3. 分配指定大小的缓冲区</span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"comment\">//4. 发送数据给服务端</span></span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(scan.hasNext())&#123;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">buf.put((<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>).format(System.currentTimeMillis())</span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"string\">&quot;\\n&quot;</span> + str).getBytes());</span><br><span class=\"line\">  buf.flip();</span><br><span class=\"line\">  sChannel.write(buf);</span><br><span class=\"line\">  buf.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//5. 关闭通道</span></span><br><span class=\"line\">  sChannel.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">服务端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//1. 获取通道</span></span><br><span class=\"line\">       <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">ssChannel</span> <span class=\"operator\">=</span> ServerSocketChannel.open();</span><br><span class=\"line\">       <span class=\"comment\">//2. 切换非阻塞模式</span></span><br><span class=\"line\">       ssChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">       <span class=\"comment\">//3. 绑定连接</span></span><br><span class=\"line\">       ssChannel.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"number\">9999</span>));</span><br><span class=\"line\">       <span class=\"comment\">//4. 获取选择器</span></span><br><span class=\"line\">       <span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> Selector.open();</span><br><span class=\"line\">       <span class=\"comment\">//5. 将通道注册到选择器上, 并且指定“监听接收事件”</span></span><br><span class=\"line\">       ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">       <span class=\"comment\">//6. 轮询式的获取选择器上已经“准备就绪”的事件</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (selector.select() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;轮一轮&quot;</span>);</span><br><span class=\"line\">           <span class=\"comment\">//7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)”</span></span><br><span class=\"line\">           Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//8. 获取准备“就绪”的是事件</span></span><br><span class=\"line\">               <span class=\"type\">SelectionKey</span> <span class=\"variable\">sk</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">               <span class=\"comment\">//9. 判断具体是什么事件准备就绪</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (sk.isAcceptable()) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//10. 若“接收就绪”，获取客户端连接</span></span><br><span class=\"line\">                   <span class=\"type\">SocketChannel</span> <span class=\"variable\">sChannel</span> <span class=\"operator\">=</span> ssChannel.accept();</span><br><span class=\"line\">                   <span class=\"comment\">//11. 切换非阻塞模式</span></span><br><span class=\"line\">                   sChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                   <span class=\"comment\">//12. 将该通道注册到选择器上</span></span><br><span class=\"line\">                   sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sk.isReadable()) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class=\"line\">                   <span class=\"type\">SocketChannel</span> <span class=\"variable\">sChannel</span> <span class=\"operator\">=</span> (SocketChannel) sk.channel();</span><br><span class=\"line\">                   <span class=\"comment\">//14. 读取数据</span></span><br><span class=\"line\">                   <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buf</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                   <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">while</span> ((len = sChannel.read(buf)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                       buf.flip();</span><br><span class=\"line\">                       System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf.array(), <span class=\"number\">0</span>, len));</span><br><span class=\"line\">                       buf.clear();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//15. 取消选择键 SelectionKey</span></span><br><span class=\"line\">               it.remove();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-9-NIO-网络编程应用实例-群聊系统\"><a href=\"#4-9-NIO-网络编程应用实例-群聊系统\" class=\"headerlink\" title=\"4.9  NIO 网络编程应用实例-群聊系统\"></a>4.9  NIO 网络编程应用实例-群聊系统</h2><h3 id=\"目标-7\"><a href=\"#目标-7\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>  <strong>需求:进一步理解 NIO 非阻塞网络编程机制，实现多人群聊</strong></p>\n<ul>\n<li><strong>编写一个 NIO 群聊系统，实现客户端与客户端的通信需求（非阻塞）</strong></li>\n<li><strong>服务器端：可以监测用户上线，离线，并实现消息转发功能</strong></li>\n<li><strong>客户端：通过 channel 可以无阻塞发送消息给其它所有客户端用户，同时可以接受其它客户端用户通过服务端转发来的消息</strong></li>\n</ul>\n<h3 id=\"服务端代码实现\"><a href=\"#服务端代码实现\" class=\"headerlink\" title=\"服务端代码实现\"></a>服务端代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerSocketChannel ssChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">9999</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化工作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Server</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">            ssChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">// 2、切换为非阻塞模式</span></span><br><span class=\"line\">            ssChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 3、绑定连接的端口</span></span><br><span class=\"line\">            ssChannel.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(PORT));</span><br><span class=\"line\">            <span class=\"comment\">// 4、获取选择器Selector</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\">            <span class=\"comment\">// 5、将通道都注册到选择器上去，并且开始指定监听接收事件</span></span><br><span class=\"line\">            ssChannel.register(selector , SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//监听</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listen</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听线程: &quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (selector.select() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;开始一轮事件处理~~~&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 7、获取选择器中的所有注册的通道中已经就绪好的事件</span></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"comment\">// 8、开始遍历这些准备好的事件</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (it.hasNext())&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 提取当前这个事件</span></span><br><span class=\"line\">                    <span class=\"type\">SelectionKey</span> <span class=\"variable\">sk</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">                    <span class=\"comment\">// 9、判断这个事件具体是什么</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sk.isAcceptable())&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 10、直接获取当前接入的客户端通道</span></span><br><span class=\"line\">                        <span class=\"type\">SocketChannel</span> <span class=\"variable\">schannel</span> <span class=\"operator\">=</span> ssChannel.accept();</span><br><span class=\"line\">                        <span class=\"comment\">// 11 、切换成非阻塞模式</span></span><br><span class=\"line\">                        schannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 12、将本客户端通道注册到选择器</span></span><br><span class=\"line\">                        System.out.println(schannel.getRemoteAddress() + <span class=\"string\">&quot; 上线 &quot;</span>);</span><br><span class=\"line\">                        schannel.register(selector , SelectionKey.OP_READ);</span><br><span class=\"line\">                        <span class=\"comment\">//提示</span></span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sk.isReadable())&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//处理读 (专门写方法..)</span></span><br><span class=\"line\">                        readData(sk);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    it.remove(); <span class=\"comment\">// 处理完毕之后需要移除当前事件</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发生异常处理....</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取客户端消息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readData</span><span class=\"params\">(SelectionKey key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//取到关联的channle</span></span><br><span class=\"line\">        <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//得到channel</span></span><br><span class=\"line\">            channel = (SocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//创建buffer</span></span><br><span class=\"line\">            <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> channel.read(buffer);</span><br><span class=\"line\">            <span class=\"comment\">//根据count的值做处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//把缓存区的数据转成字符串</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer.array());</span><br><span class=\"line\">                <span class=\"comment\">//输出该消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;form 客户端: &quot;</span> + msg);</span><br><span class=\"line\">                <span class=\"comment\">//向其它的客户端转发消息(去掉自己), 专门写一个方法来处理</span></span><br><span class=\"line\">                sendInfoToOtherClients(msg, channel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(channel.getRemoteAddress() + <span class=\"string\">&quot; 离线了..&quot;</span>);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"comment\">//取消注册</span></span><br><span class=\"line\">                key.cancel();</span><br><span class=\"line\">                <span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转发消息给其它客户(通道)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendInfoToOtherClients</span><span class=\"params\">(String msg, SocketChannel self )</span> <span class=\"keyword\">throws</span>  IOException&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器转发消息中...&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器转发数据给客户端线程: &quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"comment\">//遍历 所有注册到selector 上的 SocketChannel,并排除 self</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(SelectionKey key: selector.keys()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过 key  取出对应的 SocketChannel</span></span><br><span class=\"line\">            <span class=\"type\">Channel</span> <span class=\"variable\">targetChannel</span> <span class=\"operator\">=</span> key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//排除自己</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(targetChannel <span class=\"keyword\">instanceof</span>  SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//转型</span></span><br><span class=\"line\">                <span class=\"type\">SocketChannel</span> <span class=\"variable\">dest</span> <span class=\"operator\">=</span> (SocketChannel)targetChannel;</span><br><span class=\"line\">                <span class=\"comment\">//将msg 存储到buffer</span></span><br><span class=\"line\">                <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.wrap(msg.getBytes());</span><br><span class=\"line\">                <span class=\"comment\">//将buffer 的数据写入 通道</span></span><br><span class=\"line\">                dest.write(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建服务器对象</span></span><br><span class=\"line\">        <span class=\"type\">Server</span> <span class=\"variable\">groupChatServer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Server</span>();</span><br><span class=\"line\">        groupChatServer.listen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端代码实现\"><a href=\"#客户端代码实现\" class=\"headerlink\" title=\"客户端代码实现\"></a>客户端代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义相关的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">HOST</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>; <span class=\"comment\">// 服务器的ip</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">9999</span>; <span class=\"comment\">//服务器端口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SocketChannel socketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器, 完成初始化工作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Client</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        selector = Selector.open();</span><br><span class=\"line\">        <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">        socketChannel = socketChannel.open(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, PORT));</span><br><span class=\"line\">        <span class=\"comment\">//设置非阻塞</span></span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将channel 注册到selector</span></span><br><span class=\"line\">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">        <span class=\"comment\">//得到username</span></span><br><span class=\"line\">        username = socketChannel.getLocalAddress().toString().substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(username + <span class=\"string\">&quot; is ok...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//向服务器发送消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendInfo</span><span class=\"params\">(String info)</span> &#123;</span><br><span class=\"line\">        info = username + <span class=\"string\">&quot; 说：&quot;</span> + info;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//读取从服务器端回复的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">readChannels</span> <span class=\"operator\">=</span> selector.select();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(readChannels &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可以用的通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">SelectionKey</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(key.isReadable()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//得到相关的通道</span></span><br><span class=\"line\">                       <span class=\"type\">SocketChannel</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> (SocketChannel) key.channel();</span><br><span class=\"line\">                       <span class=\"comment\">//得到一个Buffer</span></span><br><span class=\"line\">                        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//读取</span></span><br><span class=\"line\">                        sc.read(buffer);</span><br><span class=\"line\">                        <span class=\"comment\">//把读到的缓冲区的数据转成字符串</span></span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer.array());</span><br><span class=\"line\">                        System.out.println(msg.trim());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                iterator.remove(); <span class=\"comment\">//删除当前的selectionKey, 防止重复操作</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//System.out.println(&quot;没有可以用的通道...&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//启动我们客户端</span></span><br><span class=\"line\">        <span class=\"type\">Client</span> <span class=\"variable\">chatClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Client</span>();</span><br><span class=\"line\">        <span class=\"comment\">//启动一个线程, 每个3秒，读取从服务器发送数据</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    chatClient.readInfo();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.currentThread().sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发送数据给服务器端</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNextLine()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">            chatClient.sendInfo(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"第五章-JAVA-AIO深入剖析\"><a href=\"#第五章-JAVA-AIO深入剖析\" class=\"headerlink\" title=\"第五章 JAVA AIO深入剖析\"></a>第五章 JAVA AIO深入剖析</h1><h2 id=\"5-1-AIO编程\"><a href=\"#5-1-AIO编程\" class=\"headerlink\" title=\"5.1 AIO编程\"></a>5.1 AIO编程</h2><ul>\n<li><strong>Java AIO(NIO.2) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I&#x2F;O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AIO</span><br><span class=\"line\">异步非阻塞，基于NIO的，可以称之为NIO2.0</span><br><span class=\"line\">    BIO                   NIO                              AIO        </span><br><span class=\"line\">Socket                SocketChannel                    AsynchronousSocketChannel</span><br><span class=\"line\">ServerSocket          ServerSocketChannel       AsynchronousServerSocketChannel</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可, 这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区,对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序</strong></p>\n<p>  <strong>即可以理解为，read&#x2F;write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在Java.nio.channels包下增加了下面四个异步通道：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AsynchronousSocketChannel</span><br><span class=\"line\">AsynchronousServerSocketChannel</span><br><span class=\"line\">AsynchronousFileChannel</span><br><span class=\"line\">AsynchronousDatagramChannel</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>BIO、NIO、AIO：</strong></p>\n<ul>\n<li><strong>Java BIO ： 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</strong></li>\n<li><strong>Java NIO ： 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I&#x2F;O请求时才启动一个线程进行处理。</strong></li>\n<li><strong>Java AIO(NIO.2) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I&#x2F;O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</strong></li>\n</ul>\n<p>  <strong>BIO、NIO、AIO适用场景分析:</strong></p>\n<ul>\n<li><strong>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</strong></li>\n<li><strong>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</strong></li>\n<li><strong>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。Netty!</strong></li>\n</ul>\n","feature":true,"text":"第一章 BIO、NIO、AIO课程介绍1.1 课程说明在Java的软件设计开发中，通信架构是不可避免的，我们在进行不同系统或者不同进程之间的数据交互，或者在高并...","permalink":"/post/BIO、NIO、AIO","photos":[],"count_time":{"symbolsCount":"73k","symbolsTime":"1:06"},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"}],"tags":[{"name":"BIO","slug":"BIO","count":1,"path":"api/tags/BIO.json"},{"name":"NIO","slug":"NIO","count":1,"path":"api/tags/NIO.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-BIO%E3%80%81NIO%E3%80%81AIO%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">第一章 BIO、NIO、AIO课程介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E8%AF%BE%E7%A8%8B%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">1.1 课程说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%9C%AC%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">1.2 本课程学习要求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E6%95%B4%E4%BD%93%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.3 通信技术整体解决的问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-Java%E7%9A%84I-O%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF\"><span class=\"toc-text\">第二章 Java的I&#x2F;O演进之路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-I-O-%E6%A8%A1%E5%9E%8B%E5%9F%BA%E6%9C%AC%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.1 I&#x2F;O 模型基本说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-I-O%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">2.2 I&#x2F;O模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-BIO\"><span class=\"toc-text\">Java BIO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-NIO\"><span class=\"toc-text\">Java NIO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-AIO\"><span class=\"toc-text\">Java AIO</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-BIO%E3%80%81NIO%E3%80%81AIO%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2.3 BIO、NIO、AIO适用场景分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-JAVA-BIO%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90\"><span class=\"toc-text\">第三章 JAVA BIO深入剖析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-Java-BIO-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.1 Java BIO 基本介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Java-BIO-%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">3.2 Java BIO 工作机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E4%BC%A0%E7%BB%9F%E7%9A%84BIO%E7%BC%96%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">3.3  传统的BIO编程实例回顾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">客户端案例如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">服务端案例如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-BIO%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%A4%9A%E5%8F%91%E5%92%8C%E5%A4%9A%E6%94%B6%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">3.4 BIO模式下多发和多收消息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">客户端代码如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">服务端代码如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-BIO%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8E%A5%E6%94%B6%E5%A4%9A%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">3.5 BIO模式下接收多个客户端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">客户端案例代码如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">服务端案例代码如下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-2\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E4%BC%AA%E5%BC%82%E6%AD%A5I-O%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">3.6 伪异步I&#x2F;O编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0-1\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">客户端源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E7%B1%BB\"><span class=\"toc-text\">线程池处理类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">服务端源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-3\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E5%9F%BA%E4%BA%8EBIO%E5%BD%A2%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">3.7 基于BIO形式下的文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">客户端开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">服务端开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-4\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-9-Java-BIO%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">3.9 Java BIO模式下的端口转发思想</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91-1\"><span class=\"toc-text\">客户端开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">服务端实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-5\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-10-%E5%9F%BA%E4%BA%8EBIO%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">3.10 基于BIO模式下即时通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">项目功能演示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">项目案例说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD%E6%B8%85%E5%8D%95%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E%EF%BC%9A\"><span class=\"toc-text\">功能清单简单说明：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%B8%8E%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">项目启动与演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">技术选型分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">服务端设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%A4%9A%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">服务端接收多个客户端逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-1\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-6\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E7%99%BB%E9%99%86%E6%B6%88%E6%81%AF%E4%BB%A5%E5%8F%8A%E7%9B%91%E6%B5%8B%E7%A6%BB%E7%BA%BF\"><span class=\"toc-text\">服务端接收登陆消息以及监测离线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-2\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-1\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-7\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E7%BE%A4%E8%81%8A%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">服务端接收群聊消息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-3\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-2\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-8\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E7%A7%81%E8%81%8A%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">服务端接收私聊消息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-4\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-3\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-9\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">客户端设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%95%8C%E9%9D%A2-%E7%99%BB%E9%99%86%EF%BC%8C%E5%88%B7%E6%96%B0%E5%9C%A8%E7%BA%BF\"><span class=\"toc-text\">启动客户端界面 ,登陆，刷新在线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-5\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-4\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-10\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">客户端发送消息逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-6\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-5\"><span class=\"toc-text\">实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-11\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-JAVA-NIO%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90\"><span class=\"toc-text\">第四章 JAVA NIO深入剖析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-Java-NIO-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.1 Java NIO 基本介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-NIO-%E5%92%8C-BIO-%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">4.2 NIO 和 BIO 的比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-NIO-%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE\"><span class=\"toc-text\">4.3 NIO 三大核心原理示意图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Buffer%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">Buffer缓冲区</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Channel%EF%BC%88%E9%80%9A%E9%81%93%EF%BC%89\"><span class=\"toc-text\">Channel（通道）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Selector%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">Selector选择器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-NIO%E6%A0%B8%E5%BF%83%E4%B8%80%EF%BC%9A%E7%BC%93%E5%86%B2%E5%8C%BA-Buffer\"><span class=\"toc-text\">4.4 NIO核心一：缓冲区(Buffer)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%88Buffer%EF%BC%89\"><span class=\"toc-text\">缓冲区（Buffer）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Buffer-%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB\"><span class=\"toc-text\">Buffer 类及其子类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">缓冲区的基本属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Buffer%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Buffer常见方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9A%84%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">缓冲区的数据操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">案例演示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E4%B8%8E%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">直接与非直接缓冲区</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-NIO%E6%A0%B8%E5%BF%83%E4%BA%8C%EF%BC%9A%E9%80%9A%E9%81%93-Channel\"><span class=\"toc-text\">4.5 NIO核心二：通道(Channel)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E9%81%93Channe%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">通道Channe概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84Channel%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">常用的Channel实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileChannel-%E7%B1%BB\"><span class=\"toc-text\">FileChannel 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileChannel%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">FileChannel的常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B1-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%86%99%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">案例1-本地文件写数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B2-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">案例2-本地文件读数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B3-%E4%BD%BF%E7%94%A8Buffer%E5%AE%8C%E6%88%90%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">案例3-使用Buffer完成文件复制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B4-%E5%88%86%E6%95%A3-Scatter-%E5%92%8C%E8%81%9A%E9%9B%86-Gather\"><span class=\"toc-text\">案例4-分散 (Scatter) 和聚集 (Gather)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B5-transferFrom\"><span class=\"toc-text\">案例5-transferFrom()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B6-transferTo\"><span class=\"toc-text\">案例6-transferTo()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-NIO%E6%A0%B8%E5%BF%83%E4%B8%89%EF%BC%9A%E9%80%89%E6%8B%A9%E5%99%A8-Selector\"><span class=\"toc-text\">4.6 NIO核心三：选择器(Selector)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E5%99%A8-Selector-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">选择器(Selector)概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9-%E5%99%A8%EF%BC%88Selector%EF%BC%89%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">选择 器（Selector）的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7-NIO%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.7 NIO非阻塞式网络通信原理分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Selector-%E7%A4%BA%E6%84%8F%E5%9B%BE%E5%92%8C%E7%89%B9%E7%82%B9%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">Selector 示意图和特点说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">服务端流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">客户端流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-8-NIO%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">4.8 NIO非阻塞式网络通信入门案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">代码案例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-9-NIO-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-%E7%BE%A4%E8%81%8A%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">4.9  NIO 网络编程应用实例-群聊系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87-7\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">服务端代码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">客户端代码实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0-JAVA-AIO%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90\"><span class=\"toc-text\">第五章 JAVA AIO深入剖析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-AIO%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">5.1 AIO编程</span></a></li></ol></li></ol>","author":{"name":"正茂","slug":"blog-author","avatar":"https://q2.qlogo.cn/g?b=qq&nk=749054429&s=100","link":"/","description":"Do Nothing By Halves","socials":{"github":"https://github.com/52uni","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"每日新闻60s","uid":"df2bd4a3cae38597aabb2824e73aaab3","slug":"60s","date":"2023-08-25T10:49:36.000Z","updated":"2023-12-27T09:55:08.759Z","comments":true,"path":"api/articles/60s.json","keywords":null,"cover":[],"text":" ","permalink":"/post/60s","photos":[],"count_time":{"symbolsCount":1,"symbolsTime":"1 mins."},"categories":[{"name":"实用","slug":"实用","count":1,"path":"api/categories/实用.json"}],"tags":[{"name":"新闻","slug":"新闻","count":1,"path":"api/tags/新闻.json"}],"author":{"name":"正茂","slug":"blog-author","avatar":"https://q2.qlogo.cn/g?b=qq&nk=749054429&s=100","link":"/","description":"Do Nothing By Halves","socials":{"github":"https://github.com/52uni","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":true}}